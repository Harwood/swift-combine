//
// VideoFilesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoFilesAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum DelVideoHLSError: Error, CustomStringConvertible {
        // video does not exist
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "DelVideoHLSError: video does not exist"
            }
        }
    }

    /// Delete video HLS files
    /// - DELETE /api/v1/videos/{id}/hls
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<Void, Error> 
    open func delVideoHLS(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/hls"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return DelVideoHLSError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum DelVideoWebVideosError: Error, CustomStringConvertible {
        // video does not exist
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "DelVideoWebVideosError: video does not exist"
            }
        }
    }

    /// Delete video Web Video files
    /// - DELETE /api/v1/videos/{id}/web-videos
    /// - **PeerTube >= 6.0**
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<Void, Error> 
    open func delVideoWebVideos(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/web-videos"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return DelVideoWebVideosError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
