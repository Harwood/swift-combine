//
// VideosAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideosAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }


    /// Add a video in a playlist
    /// - POST /api/v1/video-playlists/{playlistId}/videos
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter playlistId: (path) Playlist id 
    /// - parameter addVideoPlaylistVideoRequest: (body)  (optional)
    /// - returns: AnyPublisher<AddVideoPlaylistVideo200Response, Error> 
    open func addVideoPlaylistVideo(playlistId: Int, addVideoPlaylistVideoRequest: AddVideoPlaylistVideoRequest? = nil) -> AnyPublisher<AddVideoPlaylistVideo200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}/videos"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(addVideoPlaylistVideoRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AddVideoPlaylistVideo200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(AddVideoPlaylistVideo200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter nsfw
    ///
    public enum ApiV1UsersMeSubscriptionsVideosGetNsfw: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter include
    ///
    public enum ApiV1UsersMeSubscriptionsVideosGetInclude: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
    }
    ///
    /// Enum for parameter skipCount
    ///
    public enum ApiV1UsersMeSubscriptionsVideosGetSkipCount: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter sort
    ///
    public enum ApiV1UsersMeSubscriptionsVideosGetSort: String, Codable, CaseIterable {
        case name = "name"
        case duration = "-duration"
        case createdat = "-createdAt"
        case publishedat = "-publishedAt"
        case views = "-views"
        case likes = "-likes"
        case trending = "-trending"
        case hot = "-hot"
        case best = "-best"
    }

    /// List videos of subscriptions of my user
    /// - GET /api/v1/users/me/subscriptions/videos
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter isLive: (query) whether or not the video is a live (optional)
    /// - parameter tagsOneOf: (query) tag(s) of the video (optional)
    /// - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
    /// - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#operation/getLanguages)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
    /// - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
    /// - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
    /// - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
    /// - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
    /// - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
    /// - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
    /// - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query)  (optional)
    /// - parameter excludeAlreadyWatched: (query) Whether or not to exclude videos that are in the user&#39;s video history (optional)
    /// - returns: AnyPublisher<VideoListResponse, Error> 
    open func apiV1UsersMeSubscriptionsVideosGet(categoryOneOf: GetAccountVideosCategoryOneOfParameter? = nil, isLive: Bool? = nil, tagsOneOf: GetAccountVideosTagsOneOfParameter? = nil, tagsAllOf: GetAccountVideosTagsAllOfParameter? = nil, licenceOneOf: GetAccountVideosLicenceOneOfParameter? = nil, languageOneOf: GetAccountVideosLanguageOneOfParameter? = nil, nsfw: ApiV1UsersMeSubscriptionsVideosGetNsfw? = nil, isLocal: Bool? = nil, include: ApiV1UsersMeSubscriptionsVideosGetInclude? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil, skipCount: ApiV1UsersMeSubscriptionsVideosGetSkipCount? = nil, start: Int? = nil, count: Int? = nil, sort: ApiV1UsersMeSubscriptionsVideosGetSort? = nil, excludeAlreadyWatched: Bool? = nil) -> AnyPublisher<VideoListResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/users/me/subscriptions/videos"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let categoryOneOf = categoryOneOf { queryItems.append(URLQueryItem(name: "categoryOneOf", value: String(data: try self.encoder.encode(categoryOneOf), encoding: .utf8) ?? "")) } 
                if let isLive = isLive { queryItems.append(URLQueryItem(name: "isLive", value: isLive ? "true" : "false")) } 
                if let tagsOneOf = tagsOneOf { queryItems.append(URLQueryItem(name: "tagsOneOf", value: String(data: try self.encoder.encode(tagsOneOf), encoding: .utf8) ?? "")) } 
                if let tagsAllOf = tagsAllOf { queryItems.append(URLQueryItem(name: "tagsAllOf", value: String(data: try self.encoder.encode(tagsAllOf), encoding: .utf8) ?? "")) } 
                if let licenceOneOf = licenceOneOf { queryItems.append(URLQueryItem(name: "licenceOneOf", value: String(data: try self.encoder.encode(licenceOneOf), encoding: .utf8) ?? "")) } 
                if let languageOneOf = languageOneOf { queryItems.append(URLQueryItem(name: "languageOneOf", value: String(data: try self.encoder.encode(languageOneOf), encoding: .utf8) ?? "")) } 
                if let nsfw = nsfw { queryItems.append(URLQueryItem(name: "nsfw", value: nsfw.rawValue)) } 
                if let isLocal = isLocal { queryItems.append(URLQueryItem(name: "isLocal", value: isLocal ? "true" : "false")) } 
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let privacyOneOf = privacyOneOf { queryItems.append(URLQueryItem(name: "privacyOneOf", value: privacyOneOf.rawValue)) } 
                if let hasHLSFiles = hasHLSFiles { queryItems.append(URLQueryItem(name: "hasHLSFiles", value: hasHLSFiles ? "true" : "false")) } 
                if let hasWebVideoFiles = hasWebVideoFiles { queryItems.append(URLQueryItem(name: "hasWebVideoFiles", value: hasWebVideoFiles ? "true" : "false")) } 
                if let skipCount = skipCount { queryItems.append(URLQueryItem(name: "skipCount", value: skipCount.rawValue)) } 
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort.rawValue)) } 
                if let excludeAlreadyWatched = excludeAlreadyWatched { queryItems.append(URLQueryItem(name: "excludeAlreadyWatched", value: excludeAlreadyWatched ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoListResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoListResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get videos of my user
    /// - GET /api/v1/users/me/videos
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort column (optional)
    /// - returns: AnyPublisher<VideoListResponse, Error> 
    open func apiV1UsersMeVideosGet(start: Int? = nil, count: Int? = nil, sort: String? = nil) -> AnyPublisher<VideoListResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/users/me/videos"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoListResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoListResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get video imports of my user
    /// - GET /api/v1/users/me/videos/imports
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort column (optional)
    /// - parameter targetUrl: (query) Filter on import target URL (optional)
    /// - parameter videoChannelSyncId: (query) Filter on imports created by a specific channel synchronization (optional)
    /// - parameter search: (query) Search in video names (optional)
    /// - returns: AnyPublisher<VideoImportsList, Error> 
    open func apiV1UsersMeVideosImportsGet(start: Int? = nil, count: Int? = nil, sort: String? = nil, targetUrl: String? = nil, videoChannelSyncId: Double? = nil, search: String? = nil) -> AnyPublisher<VideoImportsList, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/users/me/videos/imports"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                if let targetUrl = targetUrl { queryItems.append(URLQueryItem(name: "targetUrl", value: targetUrl)) } 
                if let videoChannelSyncId = videoChannelSyncId { queryItems.append(URLQueryItem(name: "videoChannelSyncId", value: "\(videoChannelSyncId)")) } 
                if let search = search { queryItems.append(URLQueryItem(name: "search", value: search)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoImportsList, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoImportsList.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List videos of a playlist
    /// - GET /api/v1/video-playlists/{playlistId}/videos
    /// - parameter playlistId: (path) Playlist id 
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - returns: AnyPublisher<VideoListResponse, Error> 
    open func getVideoPlaylistVideos(playlistId: Int, start: Int? = nil, count: Int? = nil) -> AnyPublisher<VideoListResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}/videos"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoListResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoListResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
