//
// VideoFeedsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoFeedsAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    ///
    /// Enum for parameter format
    ///
    public enum GetSyndicatedCommentsFormat: String, Codable, CaseIterable {
        case xml = "xml"
        case rss = "rss"
        case rss2 = "rss2"
        case atom = "atom"
        case atom1 = "atom1"
        case json = "json"
        case json1 = "json1"
    }
    public enum GetSyndicatedCommentsError: Error, CustomStringConvertible {
        // Arises when:   - videoId filter is mixed with a channel filter 
        case code400Error
        // video, video channel or account not found
        case code404Error
        // accept header unsupported
        case code406Error

        public var description: String {
            switch self {
            case .code400Error:
                return "GetSyndicatedCommentsError: Arises when:   - videoId filter is mixed with a channel filter "
            case .code404Error:
                return "GetSyndicatedCommentsError: video, video channel or account not found"
            case .code406Error:
                return "GetSyndicatedCommentsError: accept header unsupported"
            }
        }
    }

    /// Comments on videos feeds
    /// - GET /feeds/video-comments.{format}
    /// - responseHeaders: [Cache-Control(String)]
    /// - parameter format: (path) format expected (we focus on making &#x60;rss&#x60; the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss)) 
    /// - parameter videoId: (query) limit listing to a specific video (optional)
    /// - parameter accountId: (query) limit listing to a specific account (optional)
    /// - parameter accountName: (query) limit listing to a specific account (optional)
    /// - parameter videoChannelId: (query) limit listing to a specific video channel (optional)
    /// - parameter videoChannelName: (query) limit listing to a specific video channel (optional)
    /// - returns: AnyPublisher<[VideoCommentsForXMLInner], Error> 
    open func getSyndicatedComments(format: GetSyndicatedCommentsFormat, videoId: String? = nil, accountId: String? = nil, accountName: String? = nil, videoChannelId: String? = nil, videoChannelName: String? = nil) -> AnyPublisher<[VideoCommentsForXMLInner], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/feeds/video-comments.{format}"
                path = path.replacingOccurrences(of: "{format}", with: )
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let videoId = videoId { queryItems.append(URLQueryItem(name: "videoId", value: videoId)) } 
                if let accountId = accountId { queryItems.append(URLQueryItem(name: "accountId", value: accountId)) } 
                if let accountName = accountName { queryItems.append(URLQueryItem(name: "accountName", value: accountName)) } 
                if let videoChannelId = videoChannelId { queryItems.append(URLQueryItem(name: "videoChannelId", value: videoChannelId)) } 
                if let videoChannelName = videoChannelName { queryItems.append(URLQueryItem(name: "videoChannelName", value: videoChannelName)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[VideoCommentsForXMLInner], Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return GetSyndicatedCommentsError.code400Error
                    }
                    if transportError.statusCode == 404 {
                        return GetSyndicatedCommentsError.code404Error
                    }
                    if transportError.statusCode == 406 {
                        return GetSyndicatedCommentsError.code406Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode([VideoCommentsForXMLInner].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter format
    ///
    public enum GetSyndicatedSubscriptionVideosFormat: String, Codable, CaseIterable {
        case xml = "xml"
        case rss = "rss"
        case rss2 = "rss2"
        case atom = "atom"
        case atom1 = "atom1"
        case json = "json"
        case json1 = "json1"
    }
    ///
    /// Enum for parameter nsfw
    ///
    public enum GetSyndicatedSubscriptionVideosNsfw: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter include
    ///
    public enum GetSyndicatedSubscriptionVideosInclude: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
    }
    public enum GetSyndicatedSubscriptionVideosError: Error, CustomStringConvertible {
        // accept header unsupported
        case code406Error

        public var description: String {
            switch self {
            case .code406Error:
                return "GetSyndicatedSubscriptionVideosError: accept header unsupported"
            }
        }
    }

    /// Videos of subscriptions feeds
    /// - GET /feeds/subscriptions.{format}
    /// - responseHeaders: [Cache-Control(String)]
    /// - parameter format: (path) format expected (we focus on making &#x60;rss&#x60; the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss)) 
    /// - parameter accountId: (query) limit listing to a specific account 
    /// - parameter token: (query) private token allowing access 
    /// - parameter sort: (query) Sort column (optional)
    /// - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
    /// - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
    /// - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
    /// - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
    /// - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
    /// - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
    /// - returns: AnyPublisher<[VideosForXMLInner], Error> 
    open func getSyndicatedSubscriptionVideos(format: GetSyndicatedSubscriptionVideosFormat, accountId: String, token: String, sort: String? = nil, nsfw: GetSyndicatedSubscriptionVideosNsfw? = nil, isLocal: Bool? = nil, include: GetSyndicatedSubscriptionVideosInclude? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil) -> AnyPublisher<[VideosForXMLInner], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/feeds/subscriptions.{format}"
                path = path.replacingOccurrences(of: "{format}", with: )
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "accountId", value: accountId))
                queryItems.append(URLQueryItem(name: "token", value: token))
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                if let nsfw = nsfw { queryItems.append(URLQueryItem(name: "nsfw", value: nsfw.rawValue)) } 
                if let isLocal = isLocal { queryItems.append(URLQueryItem(name: "isLocal", value: isLocal ? "true" : "false")) } 
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let privacyOneOf = privacyOneOf { queryItems.append(URLQueryItem(name: "privacyOneOf", value: privacyOneOf.rawValue)) } 
                if let hasHLSFiles = hasHLSFiles { queryItems.append(URLQueryItem(name: "hasHLSFiles", value: hasHLSFiles ? "true" : "false")) } 
                if let hasWebVideoFiles = hasWebVideoFiles { queryItems.append(URLQueryItem(name: "hasWebVideoFiles", value: hasWebVideoFiles ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[VideosForXMLInner], Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 406 {
                        return GetSyndicatedSubscriptionVideosError.code406Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode([VideosForXMLInner].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter format
    ///
    public enum GetSyndicatedVideosFormat: String, Codable, CaseIterable {
        case xml = "xml"
        case rss = "rss"
        case rss2 = "rss2"
        case atom = "atom"
        case atom1 = "atom1"
        case json = "json"
        case json1 = "json1"
    }
    ///
    /// Enum for parameter nsfw
    ///
    public enum GetSyndicatedVideosNsfw: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter include
    ///
    public enum GetSyndicatedVideosInclude: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
    }
    public enum GetSyndicatedVideosError: Error, CustomStringConvertible {
        // video channel or account not found
        case code404Error
        // accept header unsupported
        case code406Error

        public var description: String {
            switch self {
            case .code404Error:
                return "GetSyndicatedVideosError: video channel or account not found"
            case .code406Error:
                return "GetSyndicatedVideosError: accept header unsupported"
            }
        }
    }

    /// Common videos feeds
    /// - GET /feeds/videos.{format}
    /// - responseHeaders: [Cache-Control(String)]
    /// - parameter format: (path) format expected (we focus on making &#x60;rss&#x60; the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss)) 
    /// - parameter accountId: (query) limit listing to a specific account (optional)
    /// - parameter accountName: (query) limit listing to a specific account (optional)
    /// - parameter videoChannelId: (query) limit listing to a specific video channel (optional)
    /// - parameter videoChannelName: (query) limit listing to a specific video channel (optional)
    /// - parameter sort: (query) Sort column (optional)
    /// - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
    /// - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
    /// - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
    /// - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
    /// - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
    /// - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
    /// - returns: AnyPublisher<[VideosForXMLInner], Error> 
    open func getSyndicatedVideos(format: GetSyndicatedVideosFormat, accountId: String? = nil, accountName: String? = nil, videoChannelId: String? = nil, videoChannelName: String? = nil, sort: String? = nil, nsfw: GetSyndicatedVideosNsfw? = nil, isLocal: Bool? = nil, include: GetSyndicatedVideosInclude? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil) -> AnyPublisher<[VideosForXMLInner], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/feeds/videos.{format}"
                path = path.replacingOccurrences(of: "{format}", with: )
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let accountId = accountId { queryItems.append(URLQueryItem(name: "accountId", value: accountId)) } 
                if let accountName = accountName { queryItems.append(URLQueryItem(name: "accountName", value: accountName)) } 
                if let videoChannelId = videoChannelId { queryItems.append(URLQueryItem(name: "videoChannelId", value: videoChannelId)) } 
                if let videoChannelName = videoChannelName { queryItems.append(URLQueryItem(name: "videoChannelName", value: videoChannelName)) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                if let nsfw = nsfw { queryItems.append(URLQueryItem(name: "nsfw", value: nsfw.rawValue)) } 
                if let isLocal = isLocal { queryItems.append(URLQueryItem(name: "isLocal", value: isLocal ? "true" : "false")) } 
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let privacyOneOf = privacyOneOf { queryItems.append(URLQueryItem(name: "privacyOneOf", value: privacyOneOf.rawValue)) } 
                if let hasHLSFiles = hasHLSFiles { queryItems.append(URLQueryItem(name: "hasHLSFiles", value: hasHLSFiles ? "true" : "false")) } 
                if let hasWebVideoFiles = hasWebVideoFiles { queryItems.append(URLQueryItem(name: "hasWebVideoFiles", value: hasWebVideoFiles ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[VideosForXMLInner], Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return GetSyndicatedVideosError.code404Error
                    }
                    if transportError.statusCode == 406 {
                        return GetSyndicatedVideosError.code406Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode([VideosForXMLInner].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum GetVideosPodcastFeedError: Error, CustomStringConvertible {
        // video channel not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "GetVideosPodcastFeedError: video channel not found"
            }
        }
    }

    /// Videos podcast feed
    /// - GET /feeds/podcast/videos.xml
    /// - responseHeaders: [Cache-Control(String)]
    /// - parameter videoChannelId: (query) Limit listing to a specific video channel 
    /// - returns: AnyPublisher<Void, Error> 
    open func getVideosPodcastFeed(videoChannelId: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/feeds/podcast/videos.xml"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "videoChannelId", value: videoChannelId))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return GetVideosPodcastFeedError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
