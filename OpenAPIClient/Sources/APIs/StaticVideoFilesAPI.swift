//
// StaticVideoFilesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class StaticVideoFilesAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum StaticStreamingPlaylistsHlsFilenameGetError: Error, CustomStringConvertible {
        // invalid auth
        case code403Error
        // not found
        case code404Error

        public var description: String {
            switch self {
            case .code403Error:
                return "StaticStreamingPlaylistsHlsFilenameGetError: invalid auth"
            case .code404Error:
                return "StaticStreamingPlaylistsHlsFilenameGetError: not found"
            }
        }
    }

    /// Get public HLS video file
    /// - GET /static/streaming-playlists/hls/{filename}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter filename: (path) Filename 
    /// - returns: AnyPublisher<Void, Error> 
    open func staticStreamingPlaylistsHlsFilenameGet(filename: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/static/streaming-playlists/hls/{filename}"
                path = path.replacingOccurrences(of: "{filename}", with: filename)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return StaticStreamingPlaylistsHlsFilenameGetError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return StaticStreamingPlaylistsHlsFilenameGetError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum StaticStreamingPlaylistsHlsPrivateFilenameGetError: Error, CustomStringConvertible {
        // invalid auth
        case code403Error
        // not found
        case code404Error

        public var description: String {
            switch self {
            case .code403Error:
                return "StaticStreamingPlaylistsHlsPrivateFilenameGetError: invalid auth"
            case .code404Error:
                return "StaticStreamingPlaylistsHlsPrivateFilenameGetError: not found"
            }
        }
    }

    /// Get private HLS video file
    /// - GET /static/streaming-playlists/hls/private/{filename}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter filename: (path) Filename 
    /// - parameter videoFileToken: (query) Video file token [generated](#operation/requestVideoToken) by PeerTube so you don&#39;t need to provide an OAuth token in the request header. (optional)
    /// - parameter reinjectVideoFileToken: (query) Ask the server to reinject videoFileToken in URLs in m3u8 playlist (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func staticStreamingPlaylistsHlsPrivateFilenameGet(filename: String, videoFileToken: String? = nil, reinjectVideoFileToken: Bool? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/static/streaming-playlists/hls/private/{filename}"
                path = path.replacingOccurrences(of: "{filename}", with: filename)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let videoFileToken = videoFileToken { queryItems.append(URLQueryItem(name: "videoFileToken", value: videoFileToken)) } 
                if let reinjectVideoFileToken = reinjectVideoFileToken { queryItems.append(URLQueryItem(name: "reinjectVideoFileToken", value: reinjectVideoFileToken ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return StaticStreamingPlaylistsHlsPrivateFilenameGetError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return StaticStreamingPlaylistsHlsPrivateFilenameGetError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum StaticWebVideosFilenameGetError: Error, CustomStringConvertible {
        // not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "StaticWebVideosFilenameGetError: not found"
            }
        }
    }

    /// Get public Web Video file
    /// - GET /static/web-videos/{filename}
    /// - **PeerTube >= 6.0**
    /// - parameter filename: (path) Filename 
    /// - returns: AnyPublisher<Void, Error> 
    open func staticWebVideosFilenameGet(filename: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/static/web-videos/{filename}"
                path = path.replacingOccurrences(of: "{filename}", with: filename)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return StaticWebVideosFilenameGetError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum StaticWebVideosPrivateFilenameGetError: Error, CustomStringConvertible {
        // invalid auth
        case code403Error
        // not found
        case code404Error

        public var description: String {
            switch self {
            case .code403Error:
                return "StaticWebVideosPrivateFilenameGetError: invalid auth"
            case .code404Error:
                return "StaticWebVideosPrivateFilenameGetError: not found"
            }
        }
    }

    /// Get private Web Video file
    /// - GET /static/web-videos/private/{filename}
    /// - **PeerTube >= 6.0**
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter filename: (path) Filename 
    /// - parameter videoFileToken: (query) Video file token [generated](#operation/requestVideoToken) by PeerTube so you don&#39;t need to provide an OAuth token in the request header. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func staticWebVideosPrivateFilenameGet(filename: String, videoFileToken: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/static/web-videos/private/{filename}"
                path = path.replacingOccurrences(of: "{filename}", with: filename)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let videoFileToken = videoFileToken { queryItems.append(URLQueryItem(name: "videoFileToken", value: videoFileToken)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return StaticWebVideosPrivateFilenameGetError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return StaticWebVideosPrivateFilenameGetError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
