//
// VideoAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum AddLiveError: Error, CustomStringConvertible {
        // Disambiguate via `type`: - default type for a validation error - `live_conflicting_permanent_and_save_replay` for conflicting parameters set 
        case code400Error
        // Disambiguate via `type`: - `live_not_enabled` for a disabled live feature - `live_not_allowing_replay` for a disabled replay feature - `max_instance_lives_limit_reached` for the absolute concurrent live limit - `max_user_lives_limit_reached` for the user concurrent live limit 
        case code403Error

        public var description: String {
            switch self {
            case .code400Error:
                return "AddLiveError: Disambiguate via `type`: - default type for a validation error - `live_conflicting_permanent_and_save_replay` for conflicting parameters set "
            case .code403Error:
                return "AddLiveError: Disambiguate via `type`: - `live_not_enabled` for a disabled live feature - `live_not_allowing_replay` for a disabled replay feature - `max_instance_lives_limit_reached` for the absolute concurrent live limit - `max_user_lives_limit_reached` for the user concurrent live limit "
            }
        }
    }

    /// Create a live
    /// - POST /api/v1/videos/live
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter channelId: (form) Channel id that will contain this live video 
    /// - parameter name: (form) Live video/replay name 
    /// - parameter saveReplay: (form)  (optional)
    /// - parameter replaySettings: (form)  (optional)
    /// - parameter permanentLive: (form) User can stream multiple times in a permanent live (optional)
    /// - parameter latencyMode: (form)  (optional)
    /// - parameter thumbnailfile: (form) Live video/replay thumbnail file (optional)
    /// - parameter previewfile: (form) Live video/replay preview file (optional)
    /// - parameter privacy: (form)  (optional)
    /// - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
    /// - parameter description: (form) Live video/replay description (optional)
    /// - parameter support: (form) A text tell the audience how to support the creator (optional)
    /// - parameter nsfw: (form) Whether or not this live video/replay contains sensitive content (optional)
    /// - parameter tags: (form) Live video/replay tags (maximum 5 tags each between 2 and 30 characters) (optional)
    /// - parameter commentsEnabled: (form) Enable or disable comments for this live video/replay (optional)
    /// - parameter downloadEnabled: (form) Enable or disable downloading for the replay of this live video (optional)
    /// - returns: AnyPublisher<VideoUploadResponse, Error> 
    open func addLive(channelId: Int, name: String, saveReplay: Bool? = nil, replaySettings: LiveVideoReplaySettings? = nil, permanentLive: Bool? = nil, latencyMode: LiveVideoLatencyMode? = nil, thumbnailfile: Data? = nil, previewfile: Data? = nil, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, description: String? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil) -> AnyPublisher<VideoUploadResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/live"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                let multipartBoundary = String(format: "Boundary+%08X%08X", arc4random(), arc4random())
                var multipartData = Data()
				let channelIdHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"channelId\"\r\n")
				    .appending("\r\n")
				multipartData.append(channelIdHeader.data(using: .utf8) ?? Data())
				multipartData.append()
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				if let saveReplay = saveReplay {
					let saveReplayHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"saveReplay\"\r\n")
					    .appending("\r\n")
					multipartData.append(saveReplayHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let replaySettings = replaySettings {
					let replaySettingsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"replaySettings\"\r\n")
					    .appending("\r\n")
					multipartData.append(replaySettingsHeader.data(using: .utf8) ?? Data())
					multipartData.append(try self.encoder.encode(replaySettings))
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let permanentLive = permanentLive {
					let permanentLiveHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"permanentLive\"\r\n")
					    .appending("\r\n")
					multipartData.append(permanentLiveHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let latencyMode = latencyMode {
					let latencyModeHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"latencyMode\"\r\n")
					    .appending("\r\n")
					multipartData.append(latencyModeHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let thumbnailfile = thumbnailfile {
					let thumbnailfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"thumbnailfile\"; filename=\"thumbnailfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(thumbnailfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(thumbnailfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let previewfile = previewfile {
					let previewfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"previewfile\"; filename=\"previewfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(previewfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(previewfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let privacy = privacy {
					let privacyHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"privacy\"\r\n")
					    .appending("\r\n")
					multipartData.append(privacyHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let category = category {
					let categoryHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"category\"\r\n")
					    .appending("\r\n")
					multipartData.append(categoryHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let licence = licence {
					let licenceHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"licence\"\r\n")
					    .appending("\r\n")
					multipartData.append(licenceHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let language = language {
					let languageHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"language\"\r\n")
					    .appending("\r\n")
					multipartData.append(languageHeader.data(using: .utf8) ?? Data())
					multipartData.append(language.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let description = description {
					let descriptionHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"description\"\r\n")
					    .appending("\r\n")
					multipartData.append(descriptionHeader.data(using: .utf8) ?? Data())
					multipartData.append(description.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let support = support {
					let supportHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"support\"\r\n")
					    .appending("\r\n")
					multipartData.append(supportHeader.data(using: .utf8) ?? Data())
					multipartData.append(support.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let nsfw = nsfw {
					let nsfwHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"nsfw\"\r\n")
					    .appending("\r\n")
					multipartData.append(nsfwHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				let nameHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"name\"\r\n")
				    .appending("\r\n")
				multipartData.append(nameHeader.data(using: .utf8) ?? Data())
				multipartData.append(name.data(using: .utf8) ?? Data())
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				if let tags = tags {
					let tagsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"tags\"\r\n")
					    .appending("\r\n")
					multipartData.append(tagsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let commentsEnabled = commentsEnabled {
					let commentsEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"commentsEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(commentsEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let downloadEnabled = downloadEnabled {
					let downloadEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"downloadEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(downloadEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
				}

                multipartData.append("\r\n--\(multipartBoundary)--\r\n".data(using: .utf8) ?? Data())
                request.httpBody = multipartData
                request.setValue("\(multipartData.count)", forHTTPHeaderField: "Content-Length")
                request.setValue("multipart/form-data; boundary=\(multipartBoundary)", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoUploadResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return AddLiveError.code400Error
                    }
                    if transportError.statusCode == 403 {
                        return AddLiveError.code403Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VideoUploadResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Notify user is watching a video
    /// - POST /api/v1/videos/{id}/views
    /// - Call this endpoint regularly (every 5-10 seconds for example) to notify the server the user is watching the video. After a while, PeerTube will increase video's viewers counter. If the user is authenticated, PeerTube will also store the current player time.
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter userViewingVideo: (body)  
    /// - returns: AnyPublisher<Void, Error> 
    open func addView(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, userViewingVideo: UserViewingVideo) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/views"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(userViewingVideo)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1VideosIdStudioEditPostError: Error, CustomStringConvertible {
        // incorrect parameters
        case code400Error
        // video not found
        case code404Error

        public var description: String {
            switch self {
            case .code400Error:
                return "ApiV1VideosIdStudioEditPostError: incorrect parameters"
            case .code404Error:
                return "ApiV1VideosIdStudioEditPostError: video not found"
            }
        }
    }

    /// Create a studio task
    /// - POST /api/v1/videos/{id}/studio/edit
    /// - Create a task to edit a video  (cut, add intro/outro etc)
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1VideosIdStudioEditPost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/studio/edit"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return ApiV1VideosIdStudioEditPostError.code400Error
                    }
                    if transportError.statusCode == 404 {
                        return ApiV1VideosIdStudioEditPostError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Set watching progress of a video
    /// - PUT /api/v1/videos/{id}/watching
    /// - This endpoint has been deprecated. Use `/videos/{id}/views` instead
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter userViewingVideo: (body)  
    /// - returns: AnyPublisher<Void, Error> 
    @available(*, deprecated, message: "Deprecated API operation")
    open func apiV1VideosIdWatchingPut(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, userViewingVideo: UserViewingVideo) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/watching"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                request.httpBody = try self.encoder.encode(userViewingVideo)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete a video
    /// - DELETE /api/v1/videos/{id}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<Void, Error> 
    open func delVideo(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter nsfw
    ///
    public enum GetAccountVideosNsfw: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter include
    ///
    public enum GetAccountVideosInclude: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
    }
    ///
    /// Enum for parameter skipCount
    ///
    public enum GetAccountVideosSkipCount: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter sort
    ///
    public enum GetAccountVideosSort: String, Codable, CaseIterable {
        case name = "name"
        case duration = "-duration"
        case createdat = "-createdAt"
        case publishedat = "-publishedAt"
        case views = "-views"
        case likes = "-likes"
        case trending = "-trending"
        case hot = "-hot"
        case best = "-best"
    }

    /// List videos of an account
    /// - GET /api/v1/accounts/{name}/videos
    /// - parameter name: (path) The username or handle of the account 
    /// - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter isLive: (query) whether or not the video is a live (optional)
    /// - parameter tagsOneOf: (query) tag(s) of the video (optional)
    /// - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
    /// - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#operation/getLanguages)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
    /// - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
    /// - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
    /// - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
    /// - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
    /// - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
    /// - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
    /// - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query)  (optional)
    /// - parameter excludeAlreadyWatched: (query) Whether or not to exclude videos that are in the user&#39;s video history (optional)
    /// - returns: AnyPublisher<VideoListResponse, Error> 
    open func getAccountVideos(name: String, categoryOneOf: GetAccountVideosCategoryOneOfParameter? = nil, isLive: Bool? = nil, tagsOneOf: GetAccountVideosTagsOneOfParameter? = nil, tagsAllOf: GetAccountVideosTagsAllOfParameter? = nil, licenceOneOf: GetAccountVideosLicenceOneOfParameter? = nil, languageOneOf: GetAccountVideosLanguageOneOfParameter? = nil, nsfw: GetAccountVideosNsfw? = nil, isLocal: Bool? = nil, include: GetAccountVideosInclude? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil, skipCount: GetAccountVideosSkipCount? = nil, start: Int? = nil, count: Int? = nil, sort: GetAccountVideosSort? = nil, excludeAlreadyWatched: Bool? = nil) -> AnyPublisher<VideoListResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/accounts/{name}/videos"
                path = path.replacingOccurrences(of: "{name}", with: name)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let categoryOneOf = categoryOneOf { queryItems.append(URLQueryItem(name: "categoryOneOf", value: String(data: try self.encoder.encode(categoryOneOf), encoding: .utf8) ?? "")) } 
                if let isLive = isLive { queryItems.append(URLQueryItem(name: "isLive", value: isLive ? "true" : "false")) } 
                if let tagsOneOf = tagsOneOf { queryItems.append(URLQueryItem(name: "tagsOneOf", value: String(data: try self.encoder.encode(tagsOneOf), encoding: .utf8) ?? "")) } 
                if let tagsAllOf = tagsAllOf { queryItems.append(URLQueryItem(name: "tagsAllOf", value: String(data: try self.encoder.encode(tagsAllOf), encoding: .utf8) ?? "")) } 
                if let licenceOneOf = licenceOneOf { queryItems.append(URLQueryItem(name: "licenceOneOf", value: String(data: try self.encoder.encode(licenceOneOf), encoding: .utf8) ?? "")) } 
                if let languageOneOf = languageOneOf { queryItems.append(URLQueryItem(name: "languageOneOf", value: String(data: try self.encoder.encode(languageOneOf), encoding: .utf8) ?? "")) } 
                if let nsfw = nsfw { queryItems.append(URLQueryItem(name: "nsfw", value: nsfw.rawValue)) } 
                if let isLocal = isLocal { queryItems.append(URLQueryItem(name: "isLocal", value: isLocal ? "true" : "false")) } 
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let privacyOneOf = privacyOneOf { queryItems.append(URLQueryItem(name: "privacyOneOf", value: privacyOneOf.rawValue)) } 
                if let hasHLSFiles = hasHLSFiles { queryItems.append(URLQueryItem(name: "hasHLSFiles", value: hasHLSFiles ? "true" : "false")) } 
                if let hasWebVideoFiles = hasWebVideoFiles { queryItems.append(URLQueryItem(name: "hasWebVideoFiles", value: hasWebVideoFiles ? "true" : "false")) } 
                if let skipCount = skipCount { queryItems.append(URLQueryItem(name: "skipCount", value: skipCount.rawValue)) } 
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort.rawValue)) } 
                if let excludeAlreadyWatched = excludeAlreadyWatched { queryItems.append(URLQueryItem(name: "excludeAlreadyWatched", value: excludeAlreadyWatched ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoListResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoListResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List available video categories
    /// - GET /api/v1/videos/categories
    /// - returns: AnyPublisher<[String], Error> 
    open func getCategories() -> AnyPublisher<[String], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/categories"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[String], Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode([String].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List available video languages
    /// - GET /api/v1/videos/languages
    /// - returns: AnyPublisher<[String], Error> 
    open func getLanguages() -> AnyPublisher<[String], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/languages"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[String], Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode([String].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List available video licences
    /// - GET /api/v1/videos/licences
    /// - returns: AnyPublisher<[String], Error> 
    open func getLicences() -> AnyPublisher<[String], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/licences"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[String], Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode([String].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get information about a live
    /// - GET /api/v1/videos/live/{id}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<LiveVideoResponse, Error> 
    open func getLiveId(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<LiveVideoResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/live/{id}"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<LiveVideoResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(LiveVideoResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum GetVideoError: Error, CustomStringConvertible {
        // provide a correct password to access this password protected video
        case code403Error

        public var description: String {
            switch self {
            case .code403Error:
                return "GetVideoError: provide a correct password to access this password protected video"
            }
        }
    }

    /// Get a video
    /// - GET /api/v1/videos/{id}
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
    /// - returns: AnyPublisher<VideoDetails, Error> 
    open func getVideo(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, xPeertubeVideoPassword: String? = nil) -> AnyPublisher<VideoDetails, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let xPeertubeVideoPassword = xPeertubeVideoPassword { headers["x-peertube-video-password"] = xPeertubeVideoPassword }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoDetails, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return GetVideoError.code403Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VideoDetails.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter nsfw
    ///
    public enum GetVideoChannelVideosNsfw: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter include
    ///
    public enum GetVideoChannelVideosInclude: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
    }
    ///
    /// Enum for parameter skipCount
    ///
    public enum GetVideoChannelVideosSkipCount: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter sort
    ///
    public enum GetVideoChannelVideosSort: String, Codable, CaseIterable {
        case name = "name"
        case duration = "-duration"
        case createdat = "-createdAt"
        case publishedat = "-publishedAt"
        case views = "-views"
        case likes = "-likes"
        case trending = "-trending"
        case hot = "-hot"
        case best = "-best"
    }

    /// List videos of a video channel
    /// - GET /api/v1/video-channels/{channelHandle}/videos
    /// - parameter channelHandle: (path) The video channel handle 
    /// - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter isLive: (query) whether or not the video is a live (optional)
    /// - parameter tagsOneOf: (query) tag(s) of the video (optional)
    /// - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
    /// - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#operation/getLanguages)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
    /// - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
    /// - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
    /// - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
    /// - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
    /// - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
    /// - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
    /// - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query)  (optional)
    /// - parameter excludeAlreadyWatched: (query) Whether or not to exclude videos that are in the user&#39;s video history (optional)
    /// - returns: AnyPublisher<VideoListResponse, Error> 
    open func getVideoChannelVideos(channelHandle: String, categoryOneOf: GetAccountVideosCategoryOneOfParameter? = nil, isLive: Bool? = nil, tagsOneOf: GetAccountVideosTagsOneOfParameter? = nil, tagsAllOf: GetAccountVideosTagsAllOfParameter? = nil, licenceOneOf: GetAccountVideosLicenceOneOfParameter? = nil, languageOneOf: GetAccountVideosLanguageOneOfParameter? = nil, nsfw: GetVideoChannelVideosNsfw? = nil, isLocal: Bool? = nil, include: GetVideoChannelVideosInclude? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil, skipCount: GetVideoChannelVideosSkipCount? = nil, start: Int? = nil, count: Int? = nil, sort: GetVideoChannelVideosSort? = nil, excludeAlreadyWatched: Bool? = nil) -> AnyPublisher<VideoListResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-channels/{channelHandle}/videos"
                path = path.replacingOccurrences(of: "{channelHandle}", with: channelHandle)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let categoryOneOf = categoryOneOf { queryItems.append(URLQueryItem(name: "categoryOneOf", value: String(data: try self.encoder.encode(categoryOneOf), encoding: .utf8) ?? "")) } 
                if let isLive = isLive { queryItems.append(URLQueryItem(name: "isLive", value: isLive ? "true" : "false")) } 
                if let tagsOneOf = tagsOneOf { queryItems.append(URLQueryItem(name: "tagsOneOf", value: String(data: try self.encoder.encode(tagsOneOf), encoding: .utf8) ?? "")) } 
                if let tagsAllOf = tagsAllOf { queryItems.append(URLQueryItem(name: "tagsAllOf", value: String(data: try self.encoder.encode(tagsAllOf), encoding: .utf8) ?? "")) } 
                if let licenceOneOf = licenceOneOf { queryItems.append(URLQueryItem(name: "licenceOneOf", value: String(data: try self.encoder.encode(licenceOneOf), encoding: .utf8) ?? "")) } 
                if let languageOneOf = languageOneOf { queryItems.append(URLQueryItem(name: "languageOneOf", value: String(data: try self.encoder.encode(languageOneOf), encoding: .utf8) ?? "")) } 
                if let nsfw = nsfw { queryItems.append(URLQueryItem(name: "nsfw", value: nsfw.rawValue)) } 
                if let isLocal = isLocal { queryItems.append(URLQueryItem(name: "isLocal", value: isLocal ? "true" : "false")) } 
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let privacyOneOf = privacyOneOf { queryItems.append(URLQueryItem(name: "privacyOneOf", value: privacyOneOf.rawValue)) } 
                if let hasHLSFiles = hasHLSFiles { queryItems.append(URLQueryItem(name: "hasHLSFiles", value: hasHLSFiles ? "true" : "false")) } 
                if let hasWebVideoFiles = hasWebVideoFiles { queryItems.append(URLQueryItem(name: "hasWebVideoFiles", value: hasWebVideoFiles ? "true" : "false")) } 
                if let skipCount = skipCount { queryItems.append(URLQueryItem(name: "skipCount", value: skipCount.rawValue)) } 
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort.rawValue)) } 
                if let excludeAlreadyWatched = excludeAlreadyWatched { queryItems.append(URLQueryItem(name: "excludeAlreadyWatched", value: excludeAlreadyWatched ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoListResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoListResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get complete video description
    /// - GET /api/v1/videos/{id}/description
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
    /// - returns: AnyPublisher<String, Error> 
    open func getVideoDesc(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, xPeertubeVideoPassword: String? = nil) -> AnyPublisher<String, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/description"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let xPeertubeVideoPassword = xPeertubeVideoPassword { headers["x-peertube-video-password"] = xPeertubeVideoPassword }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<String, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(String.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List available video privacy policies
    /// - GET /api/v1/videos/privacies
    /// - returns: AnyPublisher<[String], Error> 
    open func getVideoPrivacyPolicies() -> AnyPublisher<[String], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/privacies"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[String], Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode([String].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get video source file metadata
    /// - GET /api/v1/videos/{id}/source
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<VideoSource, Error> 
    open func getVideoSource(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<VideoSource, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/source"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoSource, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoSource.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter nsfw
    ///
    public enum GetVideosNsfw: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter include
    ///
    public enum GetVideosInclude: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
    }
    ///
    /// Enum for parameter skipCount
    ///
    public enum GetVideosSkipCount: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    ///
    /// Enum for parameter sort
    ///
    public enum GetVideosSort: String, Codable, CaseIterable {
        case name = "name"
        case duration = "-duration"
        case createdat = "-createdAt"
        case publishedat = "-publishedAt"
        case views = "-views"
        case likes = "-likes"
        case trending = "-trending"
        case hot = "-hot"
        case best = "-best"
    }

    /// List videos
    /// - GET /api/v1/videos
    /// - parameter categoryOneOf: (query) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter isLive: (query) whether or not the video is a live (optional)
    /// - parameter tagsOneOf: (query) tag(s) of the video (optional)
    /// - parameter tagsAllOf: (query) tag(s) of the video, where all should be present in the video (optional)
    /// - parameter licenceOneOf: (query) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter languageOneOf: (query) language id of the video (see [/videos/languages](#operation/getLanguages)). Use &#x60;_unknown&#x60; to filter on videos that don&#39;t have a video language (optional)
    /// - parameter nsfw: (query) whether to include nsfw videos, if any (optional)
    /// - parameter isLocal: (query) **PeerTube &gt;&#x3D; 4.0** Display only local or remote videos (optional)
    /// - parameter include: (query) **PeerTube &gt;&#x3D; 4.0** Include additional videos in results (can be combined using bitwise or operator) - &#x60;0&#x60; NONE - &#x60;1&#x60; NOT_PUBLISHED_STATE - &#x60;2&#x60; BLACKLISTED - &#x60;4&#x60; BLOCKED_OWNER - &#x60;8&#x60; FILES  (optional)
    /// - parameter privacyOneOf: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos in this specific privacy/privacies (optional)
    /// - parameter hasHLSFiles: (query) **PeerTube &gt;&#x3D; 4.0** Display only videos that have HLS files (optional)
    /// - parameter hasWebVideoFiles: (query) **PeerTube &gt;&#x3D; 6.0** Display only videos that have Web Video files (optional)
    /// - parameter skipCount: (query) if you don&#39;t need the &#x60;total&#x60; in the response (optional, default to ._false)
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query)  (optional)
    /// - parameter excludeAlreadyWatched: (query) Whether or not to exclude videos that are in the user&#39;s video history (optional)
    /// - returns: AnyPublisher<VideoListResponse, Error> 
    open func getVideos(categoryOneOf: GetAccountVideosCategoryOneOfParameter? = nil, isLive: Bool? = nil, tagsOneOf: GetAccountVideosTagsOneOfParameter? = nil, tagsAllOf: GetAccountVideosTagsAllOfParameter? = nil, licenceOneOf: GetAccountVideosLicenceOneOfParameter? = nil, languageOneOf: GetAccountVideosLanguageOneOfParameter? = nil, nsfw: GetVideosNsfw? = nil, isLocal: Bool? = nil, include: GetVideosInclude? = nil, privacyOneOf: VideoPrivacySet? = nil, hasHLSFiles: Bool? = nil, hasWebVideoFiles: Bool? = nil, skipCount: GetVideosSkipCount? = nil, start: Int? = nil, count: Int? = nil, sort: GetVideosSort? = nil, excludeAlreadyWatched: Bool? = nil) -> AnyPublisher<VideoListResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let categoryOneOf = categoryOneOf { queryItems.append(URLQueryItem(name: "categoryOneOf", value: String(data: try self.encoder.encode(categoryOneOf), encoding: .utf8) ?? "")) } 
                if let isLive = isLive { queryItems.append(URLQueryItem(name: "isLive", value: isLive ? "true" : "false")) } 
                if let tagsOneOf = tagsOneOf { queryItems.append(URLQueryItem(name: "tagsOneOf", value: String(data: try self.encoder.encode(tagsOneOf), encoding: .utf8) ?? "")) } 
                if let tagsAllOf = tagsAllOf { queryItems.append(URLQueryItem(name: "tagsAllOf", value: String(data: try self.encoder.encode(tagsAllOf), encoding: .utf8) ?? "")) } 
                if let licenceOneOf = licenceOneOf { queryItems.append(URLQueryItem(name: "licenceOneOf", value: String(data: try self.encoder.encode(licenceOneOf), encoding: .utf8) ?? "")) } 
                if let languageOneOf = languageOneOf { queryItems.append(URLQueryItem(name: "languageOneOf", value: String(data: try self.encoder.encode(languageOneOf), encoding: .utf8) ?? "")) } 
                if let nsfw = nsfw { queryItems.append(URLQueryItem(name: "nsfw", value: nsfw.rawValue)) } 
                if let isLocal = isLocal { queryItems.append(URLQueryItem(name: "isLocal", value: isLocal ? "true" : "false")) } 
                if let include = include { queryItems.append(URLQueryItem(name: "include", value: include.rawValue)) } 
                if let privacyOneOf = privacyOneOf { queryItems.append(URLQueryItem(name: "privacyOneOf", value: privacyOneOf.rawValue)) } 
                if let hasHLSFiles = hasHLSFiles { queryItems.append(URLQueryItem(name: "hasHLSFiles", value: hasHLSFiles ? "true" : "false")) } 
                if let hasWebVideoFiles = hasWebVideoFiles { queryItems.append(URLQueryItem(name: "hasWebVideoFiles", value: hasWebVideoFiles ? "true" : "false")) } 
                if let skipCount = skipCount { queryItems.append(URLQueryItem(name: "skipCount", value: skipCount.rawValue)) } 
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort.rawValue)) } 
                if let excludeAlreadyWatched = excludeAlreadyWatched { queryItems.append(URLQueryItem(name: "excludeAlreadyWatched", value: excludeAlreadyWatched ? "true" : "false")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoListResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoListResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List storyboards of a video
    /// - GET /api/v1/videos/{id}/storyboards
    /// - **PeerTube** >= 6.0
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<ListVideoStoryboards200Response, Error> 
    open func listVideoStoryboards(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<ListVideoStoryboards200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/storyboards"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ListVideoStoryboards200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ListVideoStoryboards200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update a video
    /// - PUT /api/v1/videos/{id}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter thumbnailfile: (form) Video thumbnail file (optional)
    /// - parameter previewfile: (form) Video preview file (optional)
    /// - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
    /// - parameter privacy: (form)  (optional)
    /// - parameter description: (form) Video description (optional)
    /// - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
    /// - parameter support: (form) A text tell the audience how to support the video creator (optional)
    /// - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
    /// - parameter name: (form) Video name (optional)
    /// - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
    /// - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
    /// - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
    /// - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
    /// - parameter scheduleUpdate: (form)  (optional)
    /// - parameter videoPasswords: (form)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func putVideo(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, thumbnailfile: Data? = nil, previewfile: Data? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, privacy: VideoPrivacySet? = nil, description: String? = nil, waitTranscoding: String? = nil, support: String? = nil, nsfw: Bool? = nil, name: String? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, videoPasswords: [String]? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                let multipartBoundary = String(format: "Boundary+%08X%08X", arc4random(), arc4random())
                var multipartData = Data()
				if let thumbnailfile = thumbnailfile {
					let thumbnailfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"thumbnailfile\"; filename=\"thumbnailfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(thumbnailfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(thumbnailfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let previewfile = previewfile {
					let previewfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"previewfile\"; filename=\"previewfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(previewfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(previewfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let category = category {
					let categoryHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"category\"\r\n")
					    .appending("\r\n")
					multipartData.append(categoryHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let licence = licence {
					let licenceHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"licence\"\r\n")
					    .appending("\r\n")
					multipartData.append(licenceHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let language = language {
					let languageHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"language\"\r\n")
					    .appending("\r\n")
					multipartData.append(languageHeader.data(using: .utf8) ?? Data())
					multipartData.append(language.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let privacy = privacy {
					let privacyHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"privacy\"\r\n")
					    .appending("\r\n")
					multipartData.append(privacyHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let description = description {
					let descriptionHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"description\"\r\n")
					    .appending("\r\n")
					multipartData.append(descriptionHeader.data(using: .utf8) ?? Data())
					multipartData.append(description.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let waitTranscoding = waitTranscoding {
					let waitTranscodingHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"waitTranscoding\"\r\n")
					    .appending("\r\n")
					multipartData.append(waitTranscodingHeader.data(using: .utf8) ?? Data())
					multipartData.append(waitTranscoding.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let support = support {
					let supportHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"support\"\r\n")
					    .appending("\r\n")
					multipartData.append(supportHeader.data(using: .utf8) ?? Data())
					multipartData.append(support.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let nsfw = nsfw {
					let nsfwHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"nsfw\"\r\n")
					    .appending("\r\n")
					multipartData.append(nsfwHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let name = name {
					let nameHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"name\"\r\n")
					    .appending("\r\n")
					multipartData.append(nameHeader.data(using: .utf8) ?? Data())
					multipartData.append(name.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let tags = tags {
					let tagsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"tags\"\r\n")
					    .appending("\r\n")
					multipartData.append(tagsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let commentsEnabled = commentsEnabled {
					let commentsEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"commentsEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(commentsEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let downloadEnabled = downloadEnabled {
					let downloadEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"downloadEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(downloadEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let originallyPublishedAt = originallyPublishedAt {
					let originallyPublishedAtHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"originallyPublishedAt\"\r\n")
					    .appending("\r\n")
					multipartData.append(originallyPublishedAtHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let scheduleUpdate = scheduleUpdate {
					let scheduleUpdateHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"scheduleUpdate\"\r\n")
					    .appending("\r\n")
					multipartData.append(scheduleUpdateHeader.data(using: .utf8) ?? Data())
					multipartData.append(try self.encoder.encode(scheduleUpdate))
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let videoPasswords = videoPasswords {
					let videoPasswordsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"videoPasswords\"\r\n")
					    .appending("\r\n")
					multipartData.append(videoPasswordsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
				}

                multipartData.append("\r\n--\(multipartBoundary)--\r\n".data(using: .utf8) ?? Data())
                request.httpBody = multipartData
                request.setValue("\(multipartData.count)", forHTTPHeaderField: "Content-Length")
                request.setValue("multipart/form-data; boundary=\(multipartBoundary)", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ReplaceVideoSourceResumableError: Error, CustomStringConvertible {
        // video didn't pass file replacement filter
        case code403Error
        // replace upload not found
        case code404Error
        // chunk doesn't match range
        case code409Error
        // video unreadable
        case code422Error
        // too many concurrent requests
        case code429Error
        // upload is already being processed
        case code503Error

        public var description: String {
            switch self {
            case .code403Error:
                return "ReplaceVideoSourceResumableError: video didn't pass file replacement filter"
            case .code404Error:
                return "ReplaceVideoSourceResumableError: replace upload not found"
            case .code409Error:
                return "ReplaceVideoSourceResumableError: chunk doesn't match range"
            case .code422Error:
                return "ReplaceVideoSourceResumableError: video unreadable"
            case .code429Error:
                return "ReplaceVideoSourceResumableError: too many concurrent requests"
            case .code503Error:
                return "ReplaceVideoSourceResumableError: upload is already being processed"
            }
        }
    }

    /// Send chunk for the resumable replacement of a video
    /// - PUT /api/v1/videos/{id}/source/replace-resumable
    /// - **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the replacement of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
    /// - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
    /// - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
    /// - parameter body: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func replaceVideoSourceResumable(uploadId: String, contentRange: String, contentLength: Double, body: Data? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/{id}/source/replace-resumable"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "upload_id", value: uploadId))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                headers["Content-Range"] = contentRange
                headers["Content-Length"] = "\(contentLength)"
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(body)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return ReplaceVideoSourceResumableError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return ReplaceVideoSourceResumableError.code404Error
                    }
                    if transportError.statusCode == 409 {
                        return ReplaceVideoSourceResumableError.code409Error
                    }
                    if transportError.statusCode == 422 {
                        return ReplaceVideoSourceResumableError.code422Error
                    }
                    if transportError.statusCode == 429 {
                        return ReplaceVideoSourceResumableError.code429Error
                    }
                    if transportError.statusCode == 503 {
                        return ReplaceVideoSourceResumableError.code503Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ReplaceVideoSourceResumableCancelError: Error, CustomStringConvertible {
        // source file replacement not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "ReplaceVideoSourceResumableCancelError: source file replacement not found"
            }
        }
    }

    /// Cancel the resumable replacement of a video
    /// - DELETE /api/v1/videos/{id}/source/replace-resumable
    /// - **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the replacement of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - responseHeaders: [Content-Length(Double)]
    /// - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
    /// - parameter contentLength: (header)  
    /// - returns: AnyPublisher<Void, Error> 
    open func replaceVideoSourceResumableCancel(uploadId: String, contentLength: Double) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/{id}/source/replace-resumable"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "upload_id", value: uploadId))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                headers["Content-Length"] = "\(contentLength)"
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return ReplaceVideoSourceResumableCancelError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ReplaceVideoSourceResumableInitError: Error, CustomStringConvertible {
        // Disambiguate via `type`: - `max_file_size_reached` for the absolute file size limit - `quota_reached` for quota limits whether daily or global 
        case code413Error
        // video type unsupported
        case code415Error

        public var description: String {
            switch self {
            case .code413Error:
                return "ReplaceVideoSourceResumableInitError: Disambiguate via `type`: - `max_file_size_reached` for the absolute file size limit - `quota_reached` for quota limits whether daily or global "
            case .code415Error:
                return "ReplaceVideoSourceResumableInitError: video type unsupported"
            }
        }
    }

    /// Initialize the resumable replacement of a video
    /// - POST /api/v1/videos/{id}/source/replace-resumable
    /// - **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the replacement of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
    /// - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
    /// - parameter videoReplaceSourceRequestResumable: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func replaceVideoSourceResumableInit(xUploadContentLength: Double, xUploadContentType: String, videoReplaceSourceRequestResumable: VideoReplaceSourceRequestResumable? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/{id}/source/replace-resumable"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                headers["X-Upload-Content-Length"] = "\(xUploadContentLength)"
                headers["X-Upload-Content-Type"] = xUploadContentType
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(videoReplaceSourceRequestResumable)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 413 {
                        return ReplaceVideoSourceResumableInitError.code413Error
                    }
                    if transportError.statusCode == 415 {
                        return ReplaceVideoSourceResumableInitError.code415Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum RequestVideoTokenError: Error, CustomStringConvertible {
        // incorrect parameters
        case code400Error
        // video not found
        case code404Error

        public var description: String {
            switch self {
            case .code400Error:
                return "RequestVideoTokenError: incorrect parameters"
            case .code404Error:
                return "RequestVideoTokenError: video not found"
            }
        }
    }

    /// Request video token
    /// - POST /api/v1/videos/{id}/token
    /// - Request special tokens that expire quickly to use them in some context (like accessing private static files)
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
    /// - returns: AnyPublisher<VideoTokenResponse, Error> 
    open func requestVideoToken(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, xPeertubeVideoPassword: String? = nil) -> AnyPublisher<VideoTokenResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/token"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let xPeertubeVideoPassword = xPeertubeVideoPassword { headers["x-peertube-video-password"] = xPeertubeVideoPassword }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoTokenResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return RequestVideoTokenError.code400Error
                    }
                    if transportError.statusCode == 404 {
                        return RequestVideoTokenError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VideoTokenResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UpdateLiveIdError: Error, CustomStringConvertible {
        // bad parameters or trying to update a live that has already started
        case code400Error
        // trying to save replay of the live but saving replay is not enabled on the instance
        case code403Error

        public var description: String {
            switch self {
            case .code400Error:
                return "UpdateLiveIdError: bad parameters or trying to update a live that has already started"
            case .code403Error:
                return "UpdateLiveIdError: trying to save replay of the live but saving replay is not enabled on the instance"
            }
        }
    }

    /// Update information about a live
    /// - PUT /api/v1/videos/live/{id}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter liveVideoUpdate: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func updateLiveId(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, liveVideoUpdate: LiveVideoUpdate? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/live/{id}"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                request.httpBody = try self.encoder.encode(liveVideoUpdate)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return UpdateLiveIdError.code400Error
                    }
                    if transportError.statusCode == 403 {
                        return UpdateLiveIdError.code403Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UploadLegacyError: Error, CustomStringConvertible {
        // video didn't pass upload filter
        case code403Error
        // upload has timed out
        case code408Error
        // If the response has no body, it means the reverse-proxy didn't let it through. Otherwise disambiguate via `type`: - `quota_reached` for quota limits whether daily or global 
        case code413Error
        // video type unsupported
        case code415Error
        // video unreadable
        case code422Error

        public var description: String {
            switch self {
            case .code403Error:
                return "UploadLegacyError: video didn't pass upload filter"
            case .code408Error:
                return "UploadLegacyError: upload has timed out"
            case .code413Error:
                return "UploadLegacyError: If the response has no body, it means the reverse-proxy didn't let it through. Otherwise disambiguate via `type`: - `quota_reached` for quota limits whether daily or global "
            case .code415Error:
                return "UploadLegacyError: video type unsupported"
            case .code422Error:
                return "UploadLegacyError: video unreadable"
            }
        }
    }

    /// Upload a video
    /// - POST /api/v1/videos/upload
    /// - Uses a single request to upload a video.
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter name: (form) Video name 
    /// - parameter channelId: (form) Channel id that will contain this video 
    /// - parameter videofile: (form) Video file 
    /// - parameter privacy: (form)  (optional)
    /// - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
    /// - parameter description: (form) Video description (optional)
    /// - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
    /// - parameter support: (form) A text tell the audience how to support the video creator (optional)
    /// - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
    /// - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
    /// - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
    /// - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
    /// - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
    /// - parameter scheduleUpdate: (form)  (optional)
    /// - parameter thumbnailfile: (form) Video thumbnail file (optional)
    /// - parameter previewfile: (form) Video preview file (optional)
    /// - parameter videoPasswords: (form)  (optional)
    /// - returns: AnyPublisher<VideoUploadResponse, Error> 
    open func uploadLegacy(name: String, channelId: Int, videofile: Data, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, description: String? = nil, waitTranscoding: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, thumbnailfile: Data? = nil, previewfile: Data? = nil, videoPasswords: [String]? = nil) -> AnyPublisher<VideoUploadResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/upload"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                let multipartBoundary = String(format: "Boundary+%08X%08X", arc4random(), arc4random())
                var multipartData = Data()
				let nameHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"name\"\r\n")
				    .appending("\r\n")
				multipartData.append(nameHeader.data(using: .utf8) ?? Data())
				multipartData.append(name.data(using: .utf8) ?? Data())
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				let channelIdHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"channelId\"\r\n")
				    .appending("\r\n")
				multipartData.append(channelIdHeader.data(using: .utf8) ?? Data())
				multipartData.append()
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				if let privacy = privacy {
					let privacyHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"privacy\"\r\n")
					    .appending("\r\n")
					multipartData.append(privacyHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let category = category {
					let categoryHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"category\"\r\n")
					    .appending("\r\n")
					multipartData.append(categoryHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let licence = licence {
					let licenceHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"licence\"\r\n")
					    .appending("\r\n")
					multipartData.append(licenceHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let language = language {
					let languageHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"language\"\r\n")
					    .appending("\r\n")
					multipartData.append(languageHeader.data(using: .utf8) ?? Data())
					multipartData.append(language.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let description = description {
					let descriptionHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"description\"\r\n")
					    .appending("\r\n")
					multipartData.append(descriptionHeader.data(using: .utf8) ?? Data())
					multipartData.append(description.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let waitTranscoding = waitTranscoding {
					let waitTranscodingHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"waitTranscoding\"\r\n")
					    .appending("\r\n")
					multipartData.append(waitTranscodingHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let support = support {
					let supportHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"support\"\r\n")
					    .appending("\r\n")
					multipartData.append(supportHeader.data(using: .utf8) ?? Data())
					multipartData.append(support.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let nsfw = nsfw {
					let nsfwHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"nsfw\"\r\n")
					    .appending("\r\n")
					multipartData.append(nsfwHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let tags = tags {
					let tagsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"tags\"\r\n")
					    .appending("\r\n")
					multipartData.append(tagsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let commentsEnabled = commentsEnabled {
					let commentsEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"commentsEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(commentsEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let downloadEnabled = downloadEnabled {
					let downloadEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"downloadEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(downloadEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let originallyPublishedAt = originallyPublishedAt {
					let originallyPublishedAtHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"originallyPublishedAt\"\r\n")
					    .appending("\r\n")
					multipartData.append(originallyPublishedAtHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let scheduleUpdate = scheduleUpdate {
					let scheduleUpdateHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"scheduleUpdate\"\r\n")
					    .appending("\r\n")
					multipartData.append(scheduleUpdateHeader.data(using: .utf8) ?? Data())
					multipartData.append(try self.encoder.encode(scheduleUpdate))
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let thumbnailfile = thumbnailfile {
					let thumbnailfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"thumbnailfile\"; filename=\"thumbnailfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(thumbnailfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(thumbnailfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let previewfile = previewfile {
					let previewfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"previewfile\"; filename=\"previewfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(previewfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(previewfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let videoPasswords = videoPasswords {
					let videoPasswordsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"videoPasswords\"\r\n")
					    .appending("\r\n")
					multipartData.append(videoPasswordsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				let videofileHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"videofile\"; filename=\"videofile\"\r\n")
				    .appending("Content-Type: video/mp4, video/webm, video/ogg, video/avi, video/quicktime, video/x-msvideo, video/x-flv, video/x-matroska, application/octet-stream\r\n")
				    .appending("\r\n")
				multipartData.append(videofileHeader.data(using: .utf8) ?? Data())
				multipartData.append(videofile)

                multipartData.append("\r\n--\(multipartBoundary)--\r\n".data(using: .utf8) ?? Data())
                request.httpBody = multipartData
                request.setValue("\(multipartData.count)", forHTTPHeaderField: "Content-Length")
                request.setValue("multipart/form-data; boundary=\(multipartBoundary)", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoUploadResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return UploadLegacyError.code403Error
                    }
                    if transportError.statusCode == 408 {
                        return UploadLegacyError.code408Error
                    }
                    if transportError.statusCode == 413 {
                        return UploadLegacyError.code413Error
                    }
                    if transportError.statusCode == 415 {
                        return UploadLegacyError.code415Error
                    }
                    if transportError.statusCode == 422 {
                        return UploadLegacyError.code422Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VideoUploadResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UploadResumableError: Error, CustomStringConvertible {
        // video didn't pass upload filter
        case code403Error
        // upload not found
        case code404Error
        // chunk doesn't match range
        case code409Error
        // video unreadable
        case code422Error
        // too many concurrent requests
        case code429Error
        // upload is already being processed
        case code503Error

        public var description: String {
            switch self {
            case .code403Error:
                return "UploadResumableError: video didn't pass upload filter"
            case .code404Error:
                return "UploadResumableError: upload not found"
            case .code409Error:
                return "UploadResumableError: chunk doesn't match range"
            case .code422Error:
                return "UploadResumableError: video unreadable"
            case .code429Error:
                return "UploadResumableError: too many concurrent requests"
            case .code503Error:
                return "UploadResumableError: upload is already being processed"
            }
        }
    }

    /// Send chunk for the resumable upload of a video
    /// - PUT /api/v1/videos/upload-resumable
    /// - Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the upload of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - responseHeaders: [Content-Length(Double)]
    /// - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
    /// - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
    /// - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
    /// - parameter body: (body)  (optional)
    /// - returns: AnyPublisher<VideoUploadResponse, Error> 
    open func uploadResumable(uploadId: String, contentRange: String, contentLength: Double, body: Data? = nil) -> AnyPublisher<VideoUploadResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/upload-resumable"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "upload_id", value: uploadId))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                headers["Content-Range"] = contentRange
                headers["Content-Length"] = "\(contentLength)"
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(body)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoUploadResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return UploadResumableError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return UploadResumableError.code404Error
                    }
                    if transportError.statusCode == 409 {
                        return UploadResumableError.code409Error
                    }
                    if transportError.statusCode == 422 {
                        return UploadResumableError.code422Error
                    }
                    if transportError.statusCode == 429 {
                        return UploadResumableError.code429Error
                    }
                    if transportError.statusCode == 503 {
                        return UploadResumableError.code503Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VideoUploadResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UploadResumableCancelError: Error, CustomStringConvertible {
        // upload not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "UploadResumableCancelError: upload not found"
            }
        }
    }

    /// Cancel the resumable upload of a video, deleting any data uploaded so far
    /// - DELETE /api/v1/videos/upload-resumable
    /// - Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the upload of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - responseHeaders: [Content-Length(Double)]
    /// - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
    /// - parameter contentLength: (header)  
    /// - returns: AnyPublisher<Void, Error> 
    open func uploadResumableCancel(uploadId: String, contentLength: Double) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/upload-resumable"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "upload_id", value: uploadId))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                headers["Content-Length"] = "\(contentLength)"
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return UploadResumableCancelError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UploadResumableInitError: Error, CustomStringConvertible {
        // Disambiguate via `type`: - `max_file_size_reached` for the absolute file size limit - `quota_reached` for quota limits whether daily or global 
        case code413Error
        // video type unsupported
        case code415Error

        public var description: String {
            switch self {
            case .code413Error:
                return "UploadResumableInitError: Disambiguate via `type`: - `max_file_size_reached` for the absolute file size limit - `quota_reached` for quota limits whether daily or global "
            case .code415Error:
                return "UploadResumableInitError: video type unsupported"
            }
        }
    }

    /// Initialize the resumable upload of a video
    /// - POST /api/v1/videos/upload-resumable
    /// - Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the upload of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
    /// - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
    /// - parameter videoUploadRequestResumable: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func uploadResumableInit(xUploadContentLength: Double, xUploadContentType: String, videoUploadRequestResumable: VideoUploadRequestResumable? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/upload-resumable"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                headers["X-Upload-Content-Length"] = "\(xUploadContentLength)"
                headers["X-Upload-Content-Type"] = xUploadContentType
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(videoUploadRequestResumable)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 413 {
                        return UploadResumableInitError.code413Error
                    }
                    if transportError.statusCode == 415 {
                        return UploadResumableInitError.code415Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
