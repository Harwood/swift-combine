//
// VideoBlocksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoBlocksAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }


    /// Block a video
    /// - POST /api/v1/videos/{id}/blacklist
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<Void, Error> 
    open func addVideoBlock(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/blacklist"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum DelVideoBlockError: Error, CustomStringConvertible {
        // block not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "DelVideoBlockError: block not found"
            }
        }
    }

    /// Unblock a video by its id
    /// - DELETE /api/v1/videos/{id}/blacklist
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<Void, Error> 
    open func delVideoBlock(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/blacklist"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return DelVideoBlockError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter type
    ///
    public enum GetVideoBlocksModelType: Int, Codable, CaseIterable {
        case _1 = 1
        case _2 = 2
    }
    ///
    /// Enum for parameter sort
    ///
    public enum GetVideoBlocksSort: String, Codable, CaseIterable {
        case id = "-id"
        case name = "name"
        case duration = "-duration"
        case views = "-views"
        case likes = "-likes"
        case dislikes = "-dislikes"
        case uuid = "-uuid"
        case createdat = "-createdAt"
    }

    /// List video blocks
    /// - GET /api/v1/videos/blacklist
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter type: (query) list only blocks that match this type: - &#x60;1&#x60;: manual block - &#x60;2&#x60;: automatic block that needs review  (optional)
    /// - parameter search: (query) plain search that will match with video titles, and more (optional)
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort blocklists by criteria (optional)
    /// - returns: AnyPublisher<GetVideoBlocks200Response, Error> 
    open func getVideoBlocks(type: GetVideoBlocksModelType? = nil, search: String? = nil, start: Int? = nil, count: Int? = nil, sort: GetVideoBlocksSort? = nil) -> AnyPublisher<GetVideoBlocks200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/blacklist"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let type = type { queryItems.append(URLQueryItem(name: "type", value: type.rawValue)) } 
                if let search = search { queryItems.append(URLQueryItem(name: "search", value: search)) } 
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort.rawValue)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GetVideoBlocks200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(GetVideoBlocks200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
