//
// VideoOwnershipChangeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoOwnershipChangeAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum ApiV1VideosIdGiveOwnershipPostError: Error, CustomStringConvertible {
        // changing video ownership to a remote account is not supported yet
        case code400Error
        // video not found
        case code404Error

        public var description: String {
            switch self {
            case .code400Error:
                return "ApiV1VideosIdGiveOwnershipPostError: changing video ownership to a remote account is not supported yet"
            case .code404Error:
                return "ApiV1VideosIdGiveOwnershipPostError: video not found"
            }
        }
    }

    /// Request ownership change
    /// - POST /api/v1/videos/{id}/give-ownership
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter username: (form)  
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1VideosIdGiveOwnershipPost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, username: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/give-ownership"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var formEncodedItems: [String] = []
                formEncodedItems.append("username=\(username)")
                request.httpBody = formEncodedItems.joined(separator: "&").data(using: .utf8)
                request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return ApiV1VideosIdGiveOwnershipPostError.code400Error
                    }
                    if transportError.statusCode == 404 {
                        return ApiV1VideosIdGiveOwnershipPostError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List video ownership changes
    /// - GET /api/v1/videos/ownership
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1VideosOwnershipGet() -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/ownership"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1VideosOwnershipIdAcceptPostError: Error, CustomStringConvertible {
        // cannot terminate an ownership change of another user
        case code403Error
        // video ownership change not found
        case code404Error

        public var description: String {
            switch self {
            case .code403Error:
                return "ApiV1VideosOwnershipIdAcceptPostError: cannot terminate an ownership change of another user"
            case .code404Error:
                return "ApiV1VideosOwnershipIdAcceptPostError: video ownership change not found"
            }
        }
    }

    /// Accept ownership change request
    /// - POST /api/v1/videos/ownership/{id}/accept
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1VideosOwnershipIdAcceptPost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/ownership/{id}/accept"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return ApiV1VideosOwnershipIdAcceptPostError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return ApiV1VideosOwnershipIdAcceptPostError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1VideosOwnershipIdRefusePostError: Error, CustomStringConvertible {
        // cannot terminate an ownership change of another user
        case code403Error
        // video ownership change not found
        case code404Error

        public var description: String {
            switch self {
            case .code403Error:
                return "ApiV1VideosOwnershipIdRefusePostError: cannot terminate an ownership change of another user"
            case .code404Error:
                return "ApiV1VideosOwnershipIdRefusePostError: video ownership change not found"
            }
        }
    }

    /// Refuse ownership change request
    /// - POST /api/v1/videos/ownership/{id}/refuse
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1VideosOwnershipIdRefusePost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/ownership/{id}/refuse"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return ApiV1VideosOwnershipIdRefusePostError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return ApiV1VideosOwnershipIdRefusePostError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
