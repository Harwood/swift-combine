//
// LiveVideosAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class LiveVideosAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum AddLiveError: Error, CustomStringConvertible {
        // Disambiguate via `type`: - default type for a validation error - `live_conflicting_permanent_and_save_replay` for conflicting parameters set 
        case code400Error
        // Disambiguate via `type`: - `live_not_enabled` for a disabled live feature - `live_not_allowing_replay` for a disabled replay feature - `max_instance_lives_limit_reached` for the absolute concurrent live limit - `max_user_lives_limit_reached` for the user concurrent live limit 
        case code403Error

        public var description: String {
            switch self {
            case .code400Error:
                return "AddLiveError: Disambiguate via `type`: - default type for a validation error - `live_conflicting_permanent_and_save_replay` for conflicting parameters set "
            case .code403Error:
                return "AddLiveError: Disambiguate via `type`: - `live_not_enabled` for a disabled live feature - `live_not_allowing_replay` for a disabled replay feature - `max_instance_lives_limit_reached` for the absolute concurrent live limit - `max_user_lives_limit_reached` for the user concurrent live limit "
            }
        }
    }

    /// Create a live
    /// - POST /api/v1/videos/live
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter channelId: (form) Channel id that will contain this live video 
    /// - parameter name: (form) Live video/replay name 
    /// - parameter saveReplay: (form)  (optional)
    /// - parameter replaySettings: (form)  (optional)
    /// - parameter permanentLive: (form) User can stream multiple times in a permanent live (optional)
    /// - parameter latencyMode: (form)  (optional)
    /// - parameter thumbnailfile: (form) Live video/replay thumbnail file (optional)
    /// - parameter previewfile: (form) Live video/replay preview file (optional)
    /// - parameter privacy: (form)  (optional)
    /// - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
    /// - parameter description: (form) Live video/replay description (optional)
    /// - parameter support: (form) A text tell the audience how to support the creator (optional)
    /// - parameter nsfw: (form) Whether or not this live video/replay contains sensitive content (optional)
    /// - parameter tags: (form) Live video/replay tags (maximum 5 tags each between 2 and 30 characters) (optional)
    /// - parameter commentsEnabled: (form) Enable or disable comments for this live video/replay (optional)
    /// - parameter downloadEnabled: (form) Enable or disable downloading for the replay of this live video (optional)
    /// - returns: AnyPublisher<VideoUploadResponse, Error> 
    open func addLive(channelId: Int, name: String, saveReplay: Bool? = nil, replaySettings: LiveVideoReplaySettings? = nil, permanentLive: Bool? = nil, latencyMode: LiveVideoLatencyMode? = nil, thumbnailfile: Data? = nil, previewfile: Data? = nil, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, description: String? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil) -> AnyPublisher<VideoUploadResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/live"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                let multipartBoundary = String(format: "Boundary+%08X%08X", arc4random(), arc4random())
                var multipartData = Data()
				let channelIdHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"channelId\"\r\n")
				    .appending("\r\n")
				multipartData.append(channelIdHeader.data(using: .utf8) ?? Data())
				multipartData.append()
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				if let saveReplay = saveReplay {
					let saveReplayHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"saveReplay\"\r\n")
					    .appending("\r\n")
					multipartData.append(saveReplayHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let replaySettings = replaySettings {
					let replaySettingsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"replaySettings\"\r\n")
					    .appending("\r\n")
					multipartData.append(replaySettingsHeader.data(using: .utf8) ?? Data())
					multipartData.append(try self.encoder.encode(replaySettings))
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let permanentLive = permanentLive {
					let permanentLiveHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"permanentLive\"\r\n")
					    .appending("\r\n")
					multipartData.append(permanentLiveHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let latencyMode = latencyMode {
					let latencyModeHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"latencyMode\"\r\n")
					    .appending("\r\n")
					multipartData.append(latencyModeHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let thumbnailfile = thumbnailfile {
					let thumbnailfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"thumbnailfile\"; filename=\"thumbnailfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(thumbnailfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(thumbnailfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let previewfile = previewfile {
					let previewfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"previewfile\"; filename=\"previewfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(previewfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(previewfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let privacy = privacy {
					let privacyHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"privacy\"\r\n")
					    .appending("\r\n")
					multipartData.append(privacyHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let category = category {
					let categoryHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"category\"\r\n")
					    .appending("\r\n")
					multipartData.append(categoryHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let licence = licence {
					let licenceHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"licence\"\r\n")
					    .appending("\r\n")
					multipartData.append(licenceHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let language = language {
					let languageHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"language\"\r\n")
					    .appending("\r\n")
					multipartData.append(languageHeader.data(using: .utf8) ?? Data())
					multipartData.append(language.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let description = description {
					let descriptionHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"description\"\r\n")
					    .appending("\r\n")
					multipartData.append(descriptionHeader.data(using: .utf8) ?? Data())
					multipartData.append(description.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let support = support {
					let supportHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"support\"\r\n")
					    .appending("\r\n")
					multipartData.append(supportHeader.data(using: .utf8) ?? Data())
					multipartData.append(support.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let nsfw = nsfw {
					let nsfwHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"nsfw\"\r\n")
					    .appending("\r\n")
					multipartData.append(nsfwHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				let nameHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"name\"\r\n")
				    .appending("\r\n")
				multipartData.append(nameHeader.data(using: .utf8) ?? Data())
				multipartData.append(name.data(using: .utf8) ?? Data())
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				if let tags = tags {
					let tagsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"tags\"\r\n")
					    .appending("\r\n")
					multipartData.append(tagsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let commentsEnabled = commentsEnabled {
					let commentsEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"commentsEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(commentsEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let downloadEnabled = downloadEnabled {
					let downloadEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"downloadEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(downloadEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
				}

                multipartData.append("\r\n--\(multipartBoundary)--\r\n".data(using: .utf8) ?? Data())
                request.httpBody = multipartData
                request.setValue("\(multipartData.count)", forHTTPHeaderField: "Content-Length")
                request.setValue("multipart/form-data; boundary=\(multipartBoundary)", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoUploadResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return AddLiveError.code400Error
                    }
                    if transportError.statusCode == 403 {
                        return AddLiveError.code403Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VideoUploadResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get live session of a replay
    /// - GET /api/v1/videos/{id}/live-session
    /// - If the video is a replay of a live, you can find the associated live session using this endpoint
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
    /// - returns: AnyPublisher<LiveVideoSessionResponse, Error> 
    open func apiV1VideosIdLiveSessionGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, xPeertubeVideoPassword: String? = nil) -> AnyPublisher<LiveVideoSessionResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/live-session"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let xPeertubeVideoPassword = xPeertubeVideoPassword { headers["x-peertube-video-password"] = xPeertubeVideoPassword }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<LiveVideoSessionResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(LiveVideoSessionResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List live sessions
    /// - GET /api/v1/videos/live/{id}/sessions
    /// - List all sessions created in a particular live
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<ApiV1VideosLiveIdSessionsGet200Response, Error> 
    open func apiV1VideosLiveIdSessionsGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<ApiV1VideosLiveIdSessionsGet200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/live/{id}/sessions"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ApiV1VideosLiveIdSessionsGet200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ApiV1VideosLiveIdSessionsGet200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get information about a live
    /// - GET /api/v1/videos/live/{id}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<LiveVideoResponse, Error> 
    open func getLiveId(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<LiveVideoResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/live/{id}"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<LiveVideoResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(LiveVideoResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UpdateLiveIdError: Error, CustomStringConvertible {
        // bad parameters or trying to update a live that has already started
        case code400Error
        // trying to save replay of the live but saving replay is not enabled on the instance
        case code403Error

        public var description: String {
            switch self {
            case .code400Error:
                return "UpdateLiveIdError: bad parameters or trying to update a live that has already started"
            case .code403Error:
                return "UpdateLiveIdError: trying to save replay of the live but saving replay is not enabled on the instance"
            }
        }
    }

    /// Update information about a live
    /// - PUT /api/v1/videos/live/{id}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter liveVideoUpdate: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func updateLiveId(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, liveVideoUpdate: LiveVideoUpdate? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/live/{id}"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                request.httpBody = try self.encoder.encode(liveVideoUpdate)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return UpdateLiveIdError.code400Error
                    }
                    if transportError.statusCode == 403 {
                        return UpdateLiveIdError.code403Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
