//
// VideoCaptionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoCaptionsAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum AddVideoCaptionError: Error, CustomStringConvertible {
        // video or language not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "AddVideoCaptionError: video or language not found"
            }
        }
    }

    /// Add or replace a video caption
    /// - PUT /api/v1/videos/{id}/captions/{captionLanguage}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter captionLanguage: (path) The caption language 
    /// - parameter captionfile: (form) The file to upload. (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func addVideoCaption(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, captionLanguage: String, captionfile: Data? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/captions/{captionLanguage}"
                path = path.replacingOccurrences(of: "{id}", with: )
                path = path.replacingOccurrences(of: "{captionLanguage}", with: captionLanguage)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                let multipartBoundary = String(format: "Boundary+%08X%08X", arc4random(), arc4random())
                var multipartData = Data()
				if let captionfile = captionfile {
					let captionfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"captionfile\"; filename=\"captionfile\"\r\n")
					    .appending("Content-Type: text/vtt, application/x-subrip, text/plain\r\n")
					    .appending("\r\n")
					multipartData.append(captionfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(captionfile)
				}

                multipartData.append("\r\n--\(multipartBoundary)--\r\n".data(using: .utf8) ?? Data())
                request.httpBody = multipartData
                request.setValue("\(multipartData.count)", forHTTPHeaderField: "Content-Length")
                request.setValue("multipart/form-data; boundary=\(multipartBoundary)", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return AddVideoCaptionError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum DelVideoCaptionError: Error, CustomStringConvertible {
        // video or language or caption for that language not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "DelVideoCaptionError: video or language or caption for that language not found"
            }
        }
    }

    /// Delete a video caption
    /// - DELETE /api/v1/videos/{id}/captions/{captionLanguage}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter captionLanguage: (path) The caption language 
    /// - returns: AnyPublisher<Void, Error> 
    open func delVideoCaption(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, captionLanguage: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/captions/{captionLanguage}"
                path = path.replacingOccurrences(of: "{id}", with: )
                path = path.replacingOccurrences(of: "{captionLanguage}", with: captionLanguage)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return DelVideoCaptionError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List captions of a video
    /// - GET /api/v1/videos/{id}/captions
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
    /// - returns: AnyPublisher<GetVideoCaptions200Response, Error> 
    open func getVideoCaptions(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, xPeertubeVideoPassword: String? = nil) -> AnyPublisher<GetVideoCaptions200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/captions"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let xPeertubeVideoPassword = xPeertubeVideoPassword { headers["x-peertube-video-password"] = xPeertubeVideoPassword }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GetVideoCaptions200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(GetVideoCaptions200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
