//
// RegisterAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class RegisterAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }


    /// Accept registration
    /// - POST /api/v1/users/registrations/{registrationId}/accept
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter registrationId: (path) Registration ID 
    /// - parameter userRegistrationAcceptOrReject: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func acceptRegistration(registrationId: Int, userRegistrationAcceptOrReject: UserRegistrationAcceptOrReject? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/users/registrations/{registrationId}/accept"
                path = path.replacingOccurrences(of: "{registrationId}", with: "\(registrationId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(userRegistrationAcceptOrReject)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete registration
    /// - DELETE /api/v1/users/registrations/{registrationId}
    /// - Delete the registration entry. It will not remove the user associated with this registration (if any)
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter registrationId: (path) Registration ID 
    /// - returns: AnyPublisher<Void, Error> 
    open func deleteRegistration(registrationId: Int) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/users/registrations/{registrationId}"
                path = path.replacingOccurrences(of: "{registrationId}", with: "\(registrationId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter sort
    ///
    public enum ListRegistrationsSort: String, Codable, CaseIterable {
        case createdat = "-createdAt"
        case createdat2 = "createdAt"
        case state = "state"
        case state2 = "-state"
    }

    /// List registrations
    /// - GET /api/v1/users/registrations
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter search: (query)  (optional)
    /// - parameter sort: (query)  (optional)
    /// - returns: AnyPublisher<ListRegistrations200Response, Error> 
    open func listRegistrations(start: Int? = nil, count: Int? = nil, search: String? = nil, sort: ListRegistrationsSort? = nil) -> AnyPublisher<ListRegistrations200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/users/registrations"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let search = search { queryItems.append(URLQueryItem(name: "search", value: search)) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort.rawValue)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ListRegistrations200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ListRegistrations200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum RegisterUserError: Error, CustomStringConvertible {
        // request error
        case code400Error
        // user registration is not enabled, user limit is reached, registration is not allowed for the ip, requires approval or blocked by a plugin
        case code403Error
        // a user with this username, channel name or email already exists
        case code409Error

        public var description: String {
            switch self {
            case .code400Error:
                return "RegisterUserError: request error"
            case .code403Error:
                return "RegisterUserError: user registration is not enabled, user limit is reached, registration is not allowed for the ip, requires approval or blocked by a plugin"
            case .code409Error:
                return "RegisterUserError: a user with this username, channel name or email already exists"
            }
        }
    }

    /// Register a user
    /// - POST /api/v1/users/register
    /// - Signup has to be enabled and signup approval is not required
    /// - parameter registerUser: (body)  
    /// - returns: AnyPublisher<Void, Error> 
    open func registerUser(registerUser: RegisterUser) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/users/register"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(registerUser)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return RegisterUserError.code400Error
                    }
                    if transportError.statusCode == 403 {
                        return RegisterUserError.code403Error
                    }
                    if transportError.statusCode == 409 {
                        return RegisterUserError.code409Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Reject registration
    /// - POST /api/v1/users/registrations/{registrationId}/reject
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter registrationId: (path) Registration ID 
    /// - parameter userRegistrationAcceptOrReject: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func rejectRegistration(registrationId: Int, userRegistrationAcceptOrReject: UserRegistrationAcceptOrReject? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/users/registrations/{registrationId}/reject"
                path = path.replacingOccurrences(of: "{registrationId}", with: "\(registrationId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(userRegistrationAcceptOrReject)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum RequestRegistrationError: Error, CustomStringConvertible {
        // request error or signup approval is not enabled on the instance
        case code400Error
        // user registration is not enabled, user limit is reached, registration is not allowed for the ip or blocked by a plugin
        case code403Error
        // a user or registration with this username, channel name or email already exists
        case code409Error

        public var description: String {
            switch self {
            case .code400Error:
                return "RequestRegistrationError: request error or signup approval is not enabled on the instance"
            case .code403Error:
                return "RequestRegistrationError: user registration is not enabled, user limit is reached, registration is not allowed for the ip or blocked by a plugin"
            case .code409Error:
                return "RequestRegistrationError: a user or registration with this username, channel name or email already exists"
            }
        }
    }

    /// Request registration
    /// - POST /api/v1/users/registrations/request
    /// - Signup has to be enabled and require approval on the instance
    /// - parameter userRegistrationRequest: (body)  (optional)
    /// - returns: AnyPublisher<UserRegistration, Error> 
    open func requestRegistration(userRegistrationRequest: UserRegistrationRequest? = nil) -> AnyPublisher<UserRegistration, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/users/registrations/request"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(userRegistrationRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<UserRegistration, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return RequestRegistrationError.code400Error
                    }
                    if transportError.statusCode == 403 {
                        return RequestRegistrationError.code403Error
                    }
                    if transportError.statusCode == 409 {
                        return RequestRegistrationError.code409Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(UserRegistration.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Resend verification link to registration email
    /// - POST /api/v1/users/registrations/ask-send-verify-email
    /// - parameter resendEmailToVerifyRegistrationRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func resendEmailToVerifyRegistration(resendEmailToVerifyRegistrationRequest: ResendEmailToVerifyRegistrationRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/users/registrations/ask-send-verify-email"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(resendEmailToVerifyRegistrationRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Resend user verification link
    /// - POST /api/v1/users/ask-send-verify-email
    /// - parameter resendEmailToVerifyUserRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func resendEmailToVerifyUser(resendEmailToVerifyUserRequest: ResendEmailToVerifyUserRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/users/ask-send-verify-email"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(resendEmailToVerifyUserRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum VerifyRegistrationEmailError: Error, CustomStringConvertible {
        // invalid verification string
        case code403Error
        // registration not found
        case code404Error

        public var description: String {
            switch self {
            case .code403Error:
                return "VerifyRegistrationEmailError: invalid verification string"
            case .code404Error:
                return "VerifyRegistrationEmailError: registration not found"
            }
        }
    }

    /// Verify a registration email
    /// - POST /api/v1/users/registrations/{registrationId}/verify-email
    /// - Following a user registration request, the user will receive an email asking to click a link containing a secret. 
    /// - parameter registrationId: (path) Registration ID 
    /// - parameter verifyRegistrationEmailRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func verifyRegistrationEmail(registrationId: Int, verifyRegistrationEmailRequest: VerifyRegistrationEmailRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/users/registrations/{registrationId}/verify-email"
                path = path.replacingOccurrences(of: "{registrationId}", with: "\(registrationId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(verifyRegistrationEmailRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return VerifyRegistrationEmailError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return VerifyRegistrationEmailError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum VerifyUserError: Error, CustomStringConvertible {
        // invalid verification string
        case code403Error
        // user not found
        case code404Error

        public var description: String {
            switch self {
            case .code403Error:
                return "VerifyUserError: invalid verification string"
            case .code404Error:
                return "VerifyUserError: user not found"
            }
        }
    }

    /// Verify a user
    /// - POST /api/v1/users/{id}/verify-email
    /// - Following a user registration, the new user will receive an email asking to click a link containing a secret. This endpoint can also be used to verify a new email set in the user account. 
    /// - parameter id: (path) Entity id 
    /// - parameter verifyUserRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func verifyUser(id: Int, verifyUserRequest: VerifyUserRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/users/{id}/verify-email"
                path = path.replacingOccurrences(of: "{id}", with: "\(id)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(verifyUserRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return VerifyUserError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return VerifyUserError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
