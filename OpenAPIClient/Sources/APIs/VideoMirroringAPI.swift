//
// VideoMirroringAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoMirroringAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum DelMirroredVideoError: Error, CustomStringConvertible {
        // video redundancy not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "DelMirroredVideoError: video redundancy not found"
            }
        }
    }

    /// Delete a mirror done on a video
    /// - DELETE /api/v1/server/redundancy/videos/{redundancyId}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter redundancyId: (path) id of an existing redundancy on a video 
    /// - returns: AnyPublisher<Void, Error> 
    open func delMirroredVideo(redundancyId: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/server/redundancy/videos/{redundancyId}"
                path = path.replacingOccurrences(of: "{redundancyId}", with: redundancyId)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return DelMirroredVideoError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter target
    ///
    public enum GetMirroredVideosTarget: String, Codable, CaseIterable {
        case myVideos = "my-videos"
        case remoteVideos = "remote-videos"
    }
    ///
    /// Enum for parameter sort
    ///
    public enum GetMirroredVideosSort: String, Codable, CaseIterable {
        case name = "name"
    }

    /// List videos being mirrored
    /// - GET /api/v1/server/redundancy/videos
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter target: (query) direction of the mirror 
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort abuses by criteria (optional)
    /// - returns: AnyPublisher<[VideoRedundancy], Error> 
    open func getMirroredVideos(target: GetMirroredVideosTarget, start: Int? = nil, count: Int? = nil, sort: GetMirroredVideosSort? = nil) -> AnyPublisher<[VideoRedundancy], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/server/redundancy/videos"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "target", value: target.rawValue))
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort.rawValue)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[VideoRedundancy], Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode([VideoRedundancy].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum PutMirroredVideoError: Error, CustomStringConvertible {
        // cannot mirror a local video
        case code400Error
        // video does not exist
        case code404Error
        // video is already mirrored
        case code409Error

        public var description: String {
            switch self {
            case .code400Error:
                return "PutMirroredVideoError: cannot mirror a local video"
            case .code404Error:
                return "PutMirroredVideoError: video does not exist"
            case .code409Error:
                return "PutMirroredVideoError: video is already mirrored"
            }
        }
    }

    /// Mirror a video
    /// - POST /api/v1/server/redundancy/videos
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter putMirroredVideoRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func putMirroredVideo(putMirroredVideoRequest: PutMirroredVideoRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/server/redundancy/videos"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(putMirroredVideoRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return PutMirroredVideoError.code400Error
                    }
                    if transportError.statusCode == 404 {
                        return PutMirroredVideoError.code404Error
                    }
                    if transportError.statusCode == 409 {
                        return PutMirroredVideoError.code409Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
