//
// VideoCommentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoCommentsAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    ///
    /// Enum for parameter sort
    ///
    public enum ApiV1VideosIdCommentThreadsGetSort: String, Codable, CaseIterable {
        case createdat = "-createdAt"
        case totalreplies = "-totalReplies"
    }

    /// List threads of a video
    /// - GET /api/v1/videos/{id}/comment-threads
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort comments by criteria (optional)
    /// - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
    /// - returns: AnyPublisher<CommentThreadResponse, Error> 
    open func apiV1VideosIdCommentThreadsGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, start: Int? = nil, count: Int? = nil, sort: ApiV1VideosIdCommentThreadsGetSort? = nil, xPeertubeVideoPassword: String? = nil) -> AnyPublisher<CommentThreadResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/comment-threads"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort.rawValue)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let xPeertubeVideoPassword = xPeertubeVideoPassword { headers["x-peertube-video-password"] = xPeertubeVideoPassword }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CommentThreadResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(CommentThreadResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1VideosIdCommentThreadsPostError: Error, CustomStringConvertible {
        // video does not exist
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "ApiV1VideosIdCommentThreadsPostError: video does not exist"
            }
        }
    }

    /// Create a thread
    /// - POST /api/v1/videos/{id}/comment-threads
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
    /// - returns: AnyPublisher<CommentThreadPostResponse, Error> 
    open func apiV1VideosIdCommentThreadsPost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil) -> AnyPublisher<CommentThreadPostResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/comment-threads"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(apiV1VideosIdCommentThreadsPostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CommentThreadPostResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return ApiV1VideosIdCommentThreadsPostError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(CommentThreadPostResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get a thread
    /// - GET /api/v1/videos/{id}/comment-threads/{threadId}
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter threadId: (path) The thread id (root comment id) 
    /// - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
    /// - returns: AnyPublisher<VideoCommentThreadTree, Error> 
    open func apiV1VideosIdCommentThreadsThreadIdGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, threadId: Int, xPeertubeVideoPassword: String? = nil) -> AnyPublisher<VideoCommentThreadTree, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/comment-threads/{threadId}"
                path = path.replacingOccurrences(of: "{id}", with: )
                path = path.replacingOccurrences(of: "{threadId}", with: "\(threadId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                var headers = [String: String]()
                if let xPeertubeVideoPassword = xPeertubeVideoPassword { headers["x-peertube-video-password"] = xPeertubeVideoPassword }
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoCommentThreadTree, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoCommentThreadTree.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1VideosIdCommentsCommentIdDeleteError: Error, CustomStringConvertible {
        // cannot remove comment of another user
        case code403Error
        // comment or video does not exist
        case code404Error
        // comment is already deleted
        case code409Error

        public var description: String {
            switch self {
            case .code403Error:
                return "ApiV1VideosIdCommentsCommentIdDeleteError: cannot remove comment of another user"
            case .code404Error:
                return "ApiV1VideosIdCommentsCommentIdDeleteError: comment or video does not exist"
            case .code409Error:
                return "ApiV1VideosIdCommentsCommentIdDeleteError: comment is already deleted"
            }
        }
    }

    /// Delete a comment or a reply
    /// - DELETE /api/v1/videos/{id}/comments/{commentId}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter commentId: (path) The comment id 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1VideosIdCommentsCommentIdDelete(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/comments/{commentId}"
                path = path.replacingOccurrences(of: "{id}", with: )
                path = path.replacingOccurrences(of: "{commentId}", with: "\(commentId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return ApiV1VideosIdCommentsCommentIdDeleteError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return ApiV1VideosIdCommentsCommentIdDeleteError.code404Error
                    }
                    if transportError.statusCode == 409 {
                        return ApiV1VideosIdCommentsCommentIdDeleteError.code409Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1VideosIdCommentsCommentIdPostError: Error, CustomStringConvertible {
        // thread or video does not exist
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "ApiV1VideosIdCommentsCommentIdPostError: thread or video does not exist"
            }
        }
    }

    /// Reply to a thread of a video
    /// - POST /api/v1/videos/{id}/comments/{commentId}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter commentId: (path) The comment id 
    /// - parameter xPeertubeVideoPassword: (header) Required on password protected video (optional)
    /// - parameter apiV1VideosIdCommentThreadsPostRequest: (body)  (optional)
    /// - returns: AnyPublisher<CommentThreadPostResponse, Error> 
    open func apiV1VideosIdCommentsCommentIdPost(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, commentId: Int, xPeertubeVideoPassword: String? = nil, apiV1VideosIdCommentThreadsPostRequest: ApiV1VideosIdCommentThreadsPostRequest? = nil) -> AnyPublisher<CommentThreadPostResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/comments/{commentId}"
                path = path.replacingOccurrences(of: "{id}", with: )
                path = path.replacingOccurrences(of: "{commentId}", with: "\(commentId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                if let xPeertubeVideoPassword = xPeertubeVideoPassword { headers["x-peertube-video-password"] = xPeertubeVideoPassword }
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(apiV1VideosIdCommentThreadsPostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<CommentThreadPostResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return ApiV1VideosIdCommentsCommentIdPostError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(CommentThreadPostResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
