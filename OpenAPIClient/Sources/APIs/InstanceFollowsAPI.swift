//
// InstanceFollowsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class InstanceFollowsAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    ///
    /// Enum for parameter state
    ///
    public enum ApiV1ServerFollowersGetState: String, Codable, CaseIterable {
        case pending = "pending"
        case accepted = "accepted"
    }
    ///
    /// Enum for parameter actorType
    ///
    public enum ApiV1ServerFollowersGetActorType: String, Codable, CaseIterable {
        case person = "Person"
        case application = "Application"
        case group = "Group"
        case service = "Service"
        case organization = "Organization"
    }

    /// List instances following the server
    /// - GET /api/v1/server/followers
    /// - parameter state: (query)  (optional)
    /// - parameter actorType: (query)  (optional)
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort column (optional)
    /// - returns: AnyPublisher<GetAccountFollowers200Response, Error> 
    open func apiV1ServerFollowersGet(state: ApiV1ServerFollowersGetState? = nil, actorType: ApiV1ServerFollowersGetActorType? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil) -> AnyPublisher<GetAccountFollowers200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/server/followers"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let state = state { queryItems.append(URLQueryItem(name: "state", value: state.rawValue)) } 
                if let actorType = actorType { queryItems.append(URLQueryItem(name: "actorType", value: actorType.rawValue)) } 
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GetAccountFollowers200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(GetAccountFollowers200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1ServerFollowersNameWithHostAcceptPostError: Error, CustomStringConvertible {
        // follower not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "ApiV1ServerFollowersNameWithHostAcceptPostError: follower not found"
            }
        }
    }

    /// Accept a pending follower to your server
    /// - POST /api/v1/server/followers/{nameWithHost}/accept
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter nameWithHost: (path) The remote actor handle to remove from your followers 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1ServerFollowersNameWithHostAcceptPost(nameWithHost: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/server/followers/{nameWithHost}/accept"
                path = path.replacingOccurrences(of: "{nameWithHost}", with: nameWithHost)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return ApiV1ServerFollowersNameWithHostAcceptPostError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1ServerFollowersNameWithHostDeleteError: Error, CustomStringConvertible {
        // follower not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "ApiV1ServerFollowersNameWithHostDeleteError: follower not found"
            }
        }
    }

    /// Remove or reject a follower to your server
    /// - DELETE /api/v1/server/followers/{nameWithHost}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter nameWithHost: (path) The remote actor handle to remove from your followers 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1ServerFollowersNameWithHostDelete(nameWithHost: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/server/followers/{nameWithHost}"
                path = path.replacingOccurrences(of: "{nameWithHost}", with: nameWithHost)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return ApiV1ServerFollowersNameWithHostDeleteError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1ServerFollowersNameWithHostRejectPostError: Error, CustomStringConvertible {
        // follower not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "ApiV1ServerFollowersNameWithHostRejectPostError: follower not found"
            }
        }
    }

    /// Reject a pending follower to your server
    /// - POST /api/v1/server/followers/{nameWithHost}/reject
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter nameWithHost: (path) The remote actor handle to remove from your followers 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1ServerFollowersNameWithHostRejectPost(nameWithHost: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/server/followers/{nameWithHost}/reject"
                path = path.replacingOccurrences(of: "{nameWithHost}", with: nameWithHost)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return ApiV1ServerFollowersNameWithHostRejectPostError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter state
    ///
    public enum ApiV1ServerFollowingGetState: String, Codable, CaseIterable {
        case pending = "pending"
        case accepted = "accepted"
    }
    ///
    /// Enum for parameter actorType
    ///
    public enum ApiV1ServerFollowingGetActorType: String, Codable, CaseIterable {
        case person = "Person"
        case application = "Application"
        case group = "Group"
        case service = "Service"
        case organization = "Organization"
    }

    /// List instances followed by the server
    /// - GET /api/v1/server/following
    /// - parameter state: (query)  (optional)
    /// - parameter actorType: (query)  (optional)
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort column (optional)
    /// - returns: AnyPublisher<GetAccountFollowers200Response, Error> 
    open func apiV1ServerFollowingGet(state: ApiV1ServerFollowingGetState? = nil, actorType: ApiV1ServerFollowingGetActorType? = nil, start: Int? = nil, count: Int? = nil, sort: String? = nil) -> AnyPublisher<GetAccountFollowers200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/server/following"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let state = state { queryItems.append(URLQueryItem(name: "state", value: state.rawValue)) } 
                if let actorType = actorType { queryItems.append(URLQueryItem(name: "actorType", value: actorType.rawValue)) } 
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GetAccountFollowers200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(GetAccountFollowers200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1ServerFollowingHostOrHandleDeleteError: Error, CustomStringConvertible {
        // host or handle not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "ApiV1ServerFollowingHostOrHandleDeleteError: host or handle not found"
            }
        }
    }

    /// Unfollow an actor (PeerTube instance, channel or account)
    /// - DELETE /api/v1/server/following/{hostOrHandle}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter hostOrHandle: (path) The hostOrHandle to unfollow 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1ServerFollowingHostOrHandleDelete(hostOrHandle: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/server/following/{hostOrHandle}"
                path = path.replacingOccurrences(of: "{hostOrHandle}", with: hostOrHandle)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return ApiV1ServerFollowingHostOrHandleDeleteError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1ServerFollowingPostError: Error, CustomStringConvertible {
        // cannot follow a non-HTTPS server
        case code500Error

        public var description: String {
            switch self {
            case .code500Error:
                return "ApiV1ServerFollowingPostError: cannot follow a non-HTTPS server"
            }
        }
    }

    /// Follow a list of actors (PeerTube instance, channel or account)
    /// - POST /api/v1/server/following
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter apiV1ServerFollowingPostRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1ServerFollowingPost(apiV1ServerFollowingPostRequest: ApiV1ServerFollowingPostRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/server/following"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(apiV1ServerFollowingPostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 500 {
                        return ApiV1ServerFollowingPostError.code500Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
