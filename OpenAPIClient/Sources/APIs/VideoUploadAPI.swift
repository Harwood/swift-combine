//
// VideoUploadAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoUploadAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum ImportVideoError: Error, CustomStringConvertible {
        // `magnetUri` or `targetUrl` or a torrent file missing
        case code400Error
        // video didn't pass pre-import filter
        case code403Error
        // HTTP or Torrent/magnetURI import not enabled
        case code409Error

        public var description: String {
            switch self {
            case .code400Error:
                return "ImportVideoError: `magnetUri` or `targetUrl` or a torrent file missing"
            case .code403Error:
                return "ImportVideoError: video didn't pass pre-import filter"
            case .code409Error:
                return "ImportVideoError: HTTP or Torrent/magnetURI import not enabled"
            }
        }
    }

    /// Import a video
    /// - POST /api/v1/videos/imports
    /// - Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter name: (form) Video name 
    /// - parameter channelId: (form) Channel id that will contain this video 
    /// - parameter privacy: (form)  (optional)
    /// - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
    /// - parameter description: (form) Video description (optional)
    /// - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
    /// - parameter support: (form) A text tell the audience how to support the video creator (optional)
    /// - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
    /// - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
    /// - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
    /// - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
    /// - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
    /// - parameter scheduleUpdate: (form)  (optional)
    /// - parameter thumbnailfile: (form) Video thumbnail file (optional)
    /// - parameter previewfile: (form) Video preview file (optional)
    /// - parameter videoPasswords: (form)  (optional)
    /// - returns: AnyPublisher<VideoUploadResponse, Error> 
    open func importVideo(name: String, channelId: Int, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, description: String? = nil, waitTranscoding: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, thumbnailfile: Data? = nil, previewfile: Data? = nil, videoPasswords: [String]? = nil) -> AnyPublisher<VideoUploadResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/imports"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                let multipartBoundary = String(format: "Boundary+%08X%08X", arc4random(), arc4random())
                var multipartData = Data()
				let nameHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"name\"\r\n")
				    .appending("\r\n")
				multipartData.append(nameHeader.data(using: .utf8) ?? Data())
				multipartData.append(name.data(using: .utf8) ?? Data())
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				let channelIdHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"channelId\"\r\n")
				    .appending("\r\n")
				multipartData.append(channelIdHeader.data(using: .utf8) ?? Data())
				multipartData.append()
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				if let privacy = privacy {
					let privacyHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"privacy\"\r\n")
					    .appending("\r\n")
					multipartData.append(privacyHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let category = category {
					let categoryHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"category\"\r\n")
					    .appending("\r\n")
					multipartData.append(categoryHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let licence = licence {
					let licenceHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"licence\"\r\n")
					    .appending("\r\n")
					multipartData.append(licenceHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let language = language {
					let languageHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"language\"\r\n")
					    .appending("\r\n")
					multipartData.append(languageHeader.data(using: .utf8) ?? Data())
					multipartData.append(language.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let description = description {
					let descriptionHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"description\"\r\n")
					    .appending("\r\n")
					multipartData.append(descriptionHeader.data(using: .utf8) ?? Data())
					multipartData.append(description.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let waitTranscoding = waitTranscoding {
					let waitTranscodingHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"waitTranscoding\"\r\n")
					    .appending("\r\n")
					multipartData.append(waitTranscodingHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let support = support {
					let supportHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"support\"\r\n")
					    .appending("\r\n")
					multipartData.append(supportHeader.data(using: .utf8) ?? Data())
					multipartData.append(support.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let nsfw = nsfw {
					let nsfwHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"nsfw\"\r\n")
					    .appending("\r\n")
					multipartData.append(nsfwHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let tags = tags {
					let tagsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"tags\"\r\n")
					    .appending("\r\n")
					multipartData.append(tagsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let commentsEnabled = commentsEnabled {
					let commentsEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"commentsEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(commentsEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let downloadEnabled = downloadEnabled {
					let downloadEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"downloadEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(downloadEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let originallyPublishedAt = originallyPublishedAt {
					let originallyPublishedAtHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"originallyPublishedAt\"\r\n")
					    .appending("\r\n")
					multipartData.append(originallyPublishedAtHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let scheduleUpdate = scheduleUpdate {
					let scheduleUpdateHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"scheduleUpdate\"\r\n")
					    .appending("\r\n")
					multipartData.append(scheduleUpdateHeader.data(using: .utf8) ?? Data())
					multipartData.append(try self.encoder.encode(scheduleUpdate))
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let thumbnailfile = thumbnailfile {
					let thumbnailfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"thumbnailfile\"; filename=\"thumbnailfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(thumbnailfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(thumbnailfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let previewfile = previewfile {
					let previewfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"previewfile\"; filename=\"previewfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(previewfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(previewfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let videoPasswords = videoPasswords {
					let videoPasswordsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"videoPasswords\"\r\n")
					    .appending("\r\n")
					multipartData.append(videoPasswordsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
				}

                multipartData.append("\r\n--\(multipartBoundary)--\r\n".data(using: .utf8) ?? Data())
                request.httpBody = multipartData
                request.setValue("\(multipartData.count)", forHTTPHeaderField: "Content-Length")
                request.setValue("multipart/form-data; boundary=\(multipartBoundary)", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoUploadResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return ImportVideoError.code400Error
                    }
                    if transportError.statusCode == 403 {
                        return ImportVideoError.code403Error
                    }
                    if transportError.statusCode == 409 {
                        return ImportVideoError.code409Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VideoUploadResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ReplaceVideoSourceResumableError: Error, CustomStringConvertible {
        // video didn't pass file replacement filter
        case code403Error
        // replace upload not found
        case code404Error
        // chunk doesn't match range
        case code409Error
        // video unreadable
        case code422Error
        // too many concurrent requests
        case code429Error
        // upload is already being processed
        case code503Error

        public var description: String {
            switch self {
            case .code403Error:
                return "ReplaceVideoSourceResumableError: video didn't pass file replacement filter"
            case .code404Error:
                return "ReplaceVideoSourceResumableError: replace upload not found"
            case .code409Error:
                return "ReplaceVideoSourceResumableError: chunk doesn't match range"
            case .code422Error:
                return "ReplaceVideoSourceResumableError: video unreadable"
            case .code429Error:
                return "ReplaceVideoSourceResumableError: too many concurrent requests"
            case .code503Error:
                return "ReplaceVideoSourceResumableError: upload is already being processed"
            }
        }
    }

    /// Send chunk for the resumable replacement of a video
    /// - PUT /api/v1/videos/{id}/source/replace-resumable
    /// - **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the replacement of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
    /// - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
    /// - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
    /// - parameter body: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func replaceVideoSourceResumable(uploadId: String, contentRange: String, contentLength: Double, body: Data? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/{id}/source/replace-resumable"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "upload_id", value: uploadId))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                headers["Content-Range"] = contentRange
                headers["Content-Length"] = "\(contentLength)"
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(body)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return ReplaceVideoSourceResumableError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return ReplaceVideoSourceResumableError.code404Error
                    }
                    if transportError.statusCode == 409 {
                        return ReplaceVideoSourceResumableError.code409Error
                    }
                    if transportError.statusCode == 422 {
                        return ReplaceVideoSourceResumableError.code422Error
                    }
                    if transportError.statusCode == 429 {
                        return ReplaceVideoSourceResumableError.code429Error
                    }
                    if transportError.statusCode == 503 {
                        return ReplaceVideoSourceResumableError.code503Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ReplaceVideoSourceResumableCancelError: Error, CustomStringConvertible {
        // source file replacement not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "ReplaceVideoSourceResumableCancelError: source file replacement not found"
            }
        }
    }

    /// Cancel the resumable replacement of a video
    /// - DELETE /api/v1/videos/{id}/source/replace-resumable
    /// - **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the replacement of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - responseHeaders: [Content-Length(Double)]
    /// - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
    /// - parameter contentLength: (header)  
    /// - returns: AnyPublisher<Void, Error> 
    open func replaceVideoSourceResumableCancel(uploadId: String, contentLength: Double) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/{id}/source/replace-resumable"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "upload_id", value: uploadId))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                headers["Content-Length"] = "\(contentLength)"
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return ReplaceVideoSourceResumableCancelError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ReplaceVideoSourceResumableInitError: Error, CustomStringConvertible {
        // Disambiguate via `type`: - `max_file_size_reached` for the absolute file size limit - `quota_reached` for quota limits whether daily or global 
        case code413Error
        // video type unsupported
        case code415Error

        public var description: String {
            switch self {
            case .code413Error:
                return "ReplaceVideoSourceResumableInitError: Disambiguate via `type`: - `max_file_size_reached` for the absolute file size limit - `quota_reached` for quota limits whether daily or global "
            case .code415Error:
                return "ReplaceVideoSourceResumableInitError: video type unsupported"
            }
        }
    }

    /// Initialize the resumable replacement of a video
    /// - POST /api/v1/videos/{id}/source/replace-resumable
    /// - **PeerTube >= 6.0** Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the replacement of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
    /// - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
    /// - parameter videoReplaceSourceRequestResumable: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func replaceVideoSourceResumableInit(xUploadContentLength: Double, xUploadContentType: String, videoReplaceSourceRequestResumable: VideoReplaceSourceRequestResumable? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/{id}/source/replace-resumable"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                headers["X-Upload-Content-Length"] = "\(xUploadContentLength)"
                headers["X-Upload-Content-Type"] = xUploadContentType
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(videoReplaceSourceRequestResumable)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 413 {
                        return ReplaceVideoSourceResumableInitError.code413Error
                    }
                    if transportError.statusCode == 415 {
                        return ReplaceVideoSourceResumableInitError.code415Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UploadLegacyError: Error, CustomStringConvertible {
        // video didn't pass upload filter
        case code403Error
        // upload has timed out
        case code408Error
        // If the response has no body, it means the reverse-proxy didn't let it through. Otherwise disambiguate via `type`: - `quota_reached` for quota limits whether daily or global 
        case code413Error
        // video type unsupported
        case code415Error
        // video unreadable
        case code422Error

        public var description: String {
            switch self {
            case .code403Error:
                return "UploadLegacyError: video didn't pass upload filter"
            case .code408Error:
                return "UploadLegacyError: upload has timed out"
            case .code413Error:
                return "UploadLegacyError: If the response has no body, it means the reverse-proxy didn't let it through. Otherwise disambiguate via `type`: - `quota_reached` for quota limits whether daily or global "
            case .code415Error:
                return "UploadLegacyError: video type unsupported"
            case .code422Error:
                return "UploadLegacyError: video unreadable"
            }
        }
    }

    /// Upload a video
    /// - POST /api/v1/videos/upload
    /// - Uses a single request to upload a video.
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter name: (form) Video name 
    /// - parameter channelId: (form) Channel id that will contain this video 
    /// - parameter videofile: (form) Video file 
    /// - parameter privacy: (form)  (optional)
    /// - parameter category: (form) category id of the video (see [/videos/categories](#operation/getCategories)) (optional)
    /// - parameter licence: (form) licence id of the video (see [/videos/licences](#operation/getLicences)) (optional)
    /// - parameter language: (form) language id of the video (see [/videos/languages](#operation/getLanguages)) (optional)
    /// - parameter description: (form) Video description (optional)
    /// - parameter waitTranscoding: (form) Whether or not we wait transcoding before publish the video (optional)
    /// - parameter support: (form) A text tell the audience how to support the video creator (optional)
    /// - parameter nsfw: (form) Whether or not this video contains sensitive content (optional)
    /// - parameter tags: (form) Video tags (maximum 5 tags each between 2 and 30 characters) (optional)
    /// - parameter commentsEnabled: (form) Enable or disable comments for this video (optional)
    /// - parameter downloadEnabled: (form) Enable or disable downloading for this video (optional)
    /// - parameter originallyPublishedAt: (form) Date when the content was originally published (optional)
    /// - parameter scheduleUpdate: (form)  (optional)
    /// - parameter thumbnailfile: (form) Video thumbnail file (optional)
    /// - parameter previewfile: (form) Video preview file (optional)
    /// - parameter videoPasswords: (form)  (optional)
    /// - returns: AnyPublisher<VideoUploadResponse, Error> 
    open func uploadLegacy(name: String, channelId: Int, videofile: Data, privacy: VideoPrivacySet? = nil, category: Int? = nil, licence: Int? = nil, language: String? = nil, description: String? = nil, waitTranscoding: Bool? = nil, support: String? = nil, nsfw: Bool? = nil, tags: [String]? = nil, commentsEnabled: Bool? = nil, downloadEnabled: Bool? = nil, originallyPublishedAt: Date? = nil, scheduleUpdate: VideoScheduledUpdate? = nil, thumbnailfile: Data? = nil, previewfile: Data? = nil, videoPasswords: [String]? = nil) -> AnyPublisher<VideoUploadResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/upload"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                let multipartBoundary = String(format: "Boundary+%08X%08X", arc4random(), arc4random())
                var multipartData = Data()
				let nameHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"name\"\r\n")
				    .appending("\r\n")
				multipartData.append(nameHeader.data(using: .utf8) ?? Data())
				multipartData.append(name.data(using: .utf8) ?? Data())
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				let channelIdHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"channelId\"\r\n")
				    .appending("\r\n")
				multipartData.append(channelIdHeader.data(using: .utf8) ?? Data())
				multipartData.append()
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				if let privacy = privacy {
					let privacyHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"privacy\"\r\n")
					    .appending("\r\n")
					multipartData.append(privacyHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let category = category {
					let categoryHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"category\"\r\n")
					    .appending("\r\n")
					multipartData.append(categoryHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let licence = licence {
					let licenceHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"licence\"\r\n")
					    .appending("\r\n")
					multipartData.append(licenceHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let language = language {
					let languageHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"language\"\r\n")
					    .appending("\r\n")
					multipartData.append(languageHeader.data(using: .utf8) ?? Data())
					multipartData.append(language.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let description = description {
					let descriptionHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"description\"\r\n")
					    .appending("\r\n")
					multipartData.append(descriptionHeader.data(using: .utf8) ?? Data())
					multipartData.append(description.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let waitTranscoding = waitTranscoding {
					let waitTranscodingHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"waitTranscoding\"\r\n")
					    .appending("\r\n")
					multipartData.append(waitTranscodingHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let support = support {
					let supportHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"support\"\r\n")
					    .appending("\r\n")
					multipartData.append(supportHeader.data(using: .utf8) ?? Data())
					multipartData.append(support.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let nsfw = nsfw {
					let nsfwHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"nsfw\"\r\n")
					    .appending("\r\n")
					multipartData.append(nsfwHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let tags = tags {
					let tagsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"tags\"\r\n")
					    .appending("\r\n")
					multipartData.append(tagsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let commentsEnabled = commentsEnabled {
					let commentsEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"commentsEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(commentsEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let downloadEnabled = downloadEnabled {
					let downloadEnabledHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"downloadEnabled\"\r\n")
					    .appending("\r\n")
					multipartData.append(downloadEnabledHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let originallyPublishedAt = originallyPublishedAt {
					let originallyPublishedAtHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"originallyPublishedAt\"\r\n")
					    .appending("\r\n")
					multipartData.append(originallyPublishedAtHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let scheduleUpdate = scheduleUpdate {
					let scheduleUpdateHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"scheduleUpdate\"\r\n")
					    .appending("\r\n")
					multipartData.append(scheduleUpdateHeader.data(using: .utf8) ?? Data())
					multipartData.append(try self.encoder.encode(scheduleUpdate))
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let thumbnailfile = thumbnailfile {
					let thumbnailfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"thumbnailfile\"; filename=\"thumbnailfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(thumbnailfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(thumbnailfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let previewfile = previewfile {
					let previewfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"previewfile\"; filename=\"previewfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(previewfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(previewfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let videoPasswords = videoPasswords {
					let videoPasswordsHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"videoPasswords\"\r\n")
					    .appending("\r\n")
					multipartData.append(videoPasswordsHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				let videofileHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"videofile\"; filename=\"videofile\"\r\n")
				    .appending("Content-Type: video/mp4, video/webm, video/ogg, video/avi, video/quicktime, video/x-msvideo, video/x-flv, video/x-matroska, application/octet-stream\r\n")
				    .appending("\r\n")
				multipartData.append(videofileHeader.data(using: .utf8) ?? Data())
				multipartData.append(videofile)

                multipartData.append("\r\n--\(multipartBoundary)--\r\n".data(using: .utf8) ?? Data())
                request.httpBody = multipartData
                request.setValue("\(multipartData.count)", forHTTPHeaderField: "Content-Length")
                request.setValue("multipart/form-data; boundary=\(multipartBoundary)", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoUploadResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return UploadLegacyError.code403Error
                    }
                    if transportError.statusCode == 408 {
                        return UploadLegacyError.code408Error
                    }
                    if transportError.statusCode == 413 {
                        return UploadLegacyError.code413Error
                    }
                    if transportError.statusCode == 415 {
                        return UploadLegacyError.code415Error
                    }
                    if transportError.statusCode == 422 {
                        return UploadLegacyError.code422Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VideoUploadResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UploadResumableError: Error, CustomStringConvertible {
        // video didn't pass upload filter
        case code403Error
        // upload not found
        case code404Error
        // chunk doesn't match range
        case code409Error
        // video unreadable
        case code422Error
        // too many concurrent requests
        case code429Error
        // upload is already being processed
        case code503Error

        public var description: String {
            switch self {
            case .code403Error:
                return "UploadResumableError: video didn't pass upload filter"
            case .code404Error:
                return "UploadResumableError: upload not found"
            case .code409Error:
                return "UploadResumableError: chunk doesn't match range"
            case .code422Error:
                return "UploadResumableError: video unreadable"
            case .code429Error:
                return "UploadResumableError: too many concurrent requests"
            case .code503Error:
                return "UploadResumableError: upload is already being processed"
            }
        }
    }

    /// Send chunk for the resumable upload of a video
    /// - PUT /api/v1/videos/upload-resumable
    /// - Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the upload of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - responseHeaders: [Content-Length(Double)]
    /// - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
    /// - parameter contentRange: (header) Specifies the bytes in the file that the request is uploading.  For example, a value of &#x60;bytes 0-262143/1000000&#x60; shows that the request is sending the first 262144 bytes (256 x 1024) in a 2,469,036 byte file.  
    /// - parameter contentLength: (header) Size of the chunk that the request is sending.  Remember that larger chunks are more efficient. PeerTube&#39;s web client uses chunks varying from 1048576 bytes (~1MB) and increases or reduces size depending on connection health.  
    /// - parameter body: (body)  (optional)
    /// - returns: AnyPublisher<VideoUploadResponse, Error> 
    open func uploadResumable(uploadId: String, contentRange: String, contentLength: Double, body: Data? = nil) -> AnyPublisher<VideoUploadResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/upload-resumable"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "upload_id", value: uploadId))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                var headers = [String: String]()
                headers["Content-Range"] = contentRange
                headers["Content-Length"] = "\(contentLength)"
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(body)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoUploadResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 403 {
                        return UploadResumableError.code403Error
                    }
                    if transportError.statusCode == 404 {
                        return UploadResumableError.code404Error
                    }
                    if transportError.statusCode == 409 {
                        return UploadResumableError.code409Error
                    }
                    if transportError.statusCode == 422 {
                        return UploadResumableError.code422Error
                    }
                    if transportError.statusCode == 429 {
                        return UploadResumableError.code429Error
                    }
                    if transportError.statusCode == 503 {
                        return UploadResumableError.code503Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VideoUploadResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UploadResumableCancelError: Error, CustomStringConvertible {
        // upload not found
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "UploadResumableCancelError: upload not found"
            }
        }
    }

    /// Cancel the resumable upload of a video, deleting any data uploaded so far
    /// - DELETE /api/v1/videos/upload-resumable
    /// - Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the upload of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - responseHeaders: [Content-Length(Double)]
    /// - parameter uploadId: (query) Created session id to proceed with. If you didn&#39;t send chunks in the last hour, it is not valid anymore and you need to initialize a new upload.  
    /// - parameter contentLength: (header)  
    /// - returns: AnyPublisher<Void, Error> 
    open func uploadResumableCancel(uploadId: String, contentLength: Double) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/upload-resumable"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "upload_id", value: uploadId))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                var headers = [String: String]()
                headers["Content-Length"] = "\(contentLength)"
                request.allHTTPHeaderFields = headers
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return UploadResumableCancelError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UploadResumableInitError: Error, CustomStringConvertible {
        // Disambiguate via `type`: - `max_file_size_reached` for the absolute file size limit - `quota_reached` for quota limits whether daily or global 
        case code413Error
        // video type unsupported
        case code415Error

        public var description: String {
            switch self {
            case .code413Error:
                return "UploadResumableInitError: Disambiguate via `type`: - `max_file_size_reached` for the absolute file size limit - `quota_reached` for quota limits whether daily or global "
            case .code415Error:
                return "UploadResumableInitError: video type unsupported"
            }
        }
    }

    /// Initialize the resumable upload of a video
    /// - POST /api/v1/videos/upload-resumable
    /// - Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the upload of a video
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter xUploadContentLength: (header) Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading. 
    /// - parameter xUploadContentType: (header) MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary. 
    /// - parameter videoUploadRequestResumable: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func uploadResumableInit(xUploadContentLength: Double, xUploadContentType: String, videoUploadRequestResumable: VideoUploadRequestResumable? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/videos/upload-resumable"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var headers = [String: String]()
                headers["X-Upload-Content-Length"] = "\(xUploadContentLength)"
                headers["X-Upload-Content-Type"] = xUploadContentType
                request.allHTTPHeaderFields = headers
                request.httpBody = try self.encoder.encode(videoUploadRequestResumable)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 413 {
                        return UploadResumableInitError.code413Error
                    }
                    if transportError.statusCode == 415 {
                        return UploadResumableInitError.code415Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
