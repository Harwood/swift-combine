//
// VideoStatsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoStatsAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }


    /// Get overall stats of a video
    /// - GET /api/v1/videos/{id}/stats/overall
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter startDate: (query) Filter stats by start date (optional)
    /// - parameter endDate: (query) Filter stats by end date (optional)
    /// - returns: AnyPublisher<VideoStatsOverall, Error> 
    open func apiV1VideosIdStatsOverallGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, startDate: Date? = nil, endDate: Date? = nil) -> AnyPublisher<VideoStatsOverall, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/stats/overall"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "startDate", value: OpenISO8601DateFormatter.shared.string(from: startDate))) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "endDate", value: OpenISO8601DateFormatter.shared.string(from: endDate))) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoStatsOverall, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoStatsOverall.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get retention stats of a video
    /// - GET /api/v1/videos/{id}/stats/retention
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - returns: AnyPublisher<VideoStatsRetention, Error> 
    open func apiV1VideosIdStatsRetentionGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter) -> AnyPublisher<VideoStatsRetention, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/stats/retention"
                path = path.replacingOccurrences(of: "{id}", with: )
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoStatsRetention, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoStatsRetention.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    ///
    /// Enum for parameter metric
    ///
    public enum ApiV1VideosIdStatsTimeseriesMetricGetMetric: String, Codable, CaseIterable {
        case viewers = "viewers"
        case aggregatewatchtime = "aggregateWatchTime"
    }

    /// Get timeserie stats of a video
    /// - GET /api/v1/videos/{id}/stats/timeseries/{metric}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter id: (path) The object id, uuid or short uuid 
    /// - parameter metric: (path) The metric to get 
    /// - parameter startDate: (query) Filter stats by start date (optional)
    /// - parameter endDate: (query) Filter stats by end date (optional)
    /// - returns: AnyPublisher<VideoStatsTimeserie, Error> 
    open func apiV1VideosIdStatsTimeseriesMetricGet(id: ApiV1VideosOwnershipIdAcceptPostIdParameter, metric: ApiV1VideosIdStatsTimeseriesMetricGetMetric, startDate: Date? = nil, endDate: Date? = nil) -> AnyPublisher<VideoStatsTimeserie, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/videos/{id}/stats/timeseries/{metric}"
                path = path.replacingOccurrences(of: "{id}", with: )
                path = path.replacingOccurrences(of: "{metric}", with: )
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "startDate", value: OpenISO8601DateFormatter.shared.string(from: startDate))) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "endDate", value: OpenISO8601DateFormatter.shared.string(from: endDate))) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoStatsTimeserie, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoStatsTimeserie.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
