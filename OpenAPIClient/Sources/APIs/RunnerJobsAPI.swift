//
// RunnerJobsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class RunnerJobsAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    ///
    /// Enum for parameter sort
    ///
    public enum ApiV1RunnersJobsGetSort: String, Codable, CaseIterable {
        case updatedat = "updatedAt"
        case createdat = "createdAt"
        case priority = "priority"
        case state = "state"
        case progress = "progress"
    }

    /// List jobs
    /// - GET /api/v1/runners/jobs
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort runner jobs by criteria (optional)
    /// - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
    /// - parameter stateOneOf: (query)  (optional)
    /// - returns: AnyPublisher<ApiV1RunnersJobsGet200Response, Error> 
    open func apiV1RunnersJobsGet(start: Int? = nil, count: Int? = nil, sort: ApiV1RunnersJobsGetSort? = nil, search: String? = nil, stateOneOf: [RunnerJobState]? = nil) -> AnyPublisher<ApiV1RunnersJobsGet200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/runners/jobs"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort.rawValue)) } 
                if let search = search { queryItems.append(URLQueryItem(name: "search", value: search)) } 
                if let stateOneOf = stateOneOf { queryItems.append(URLQueryItem(name: "stateOneOf", value: String(data: try self.encoder.encode(stateOneOf), encoding: .utf8) ?? "")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ApiV1RunnersJobsGet200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ApiV1RunnersJobsGet200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Abort job
    /// - POST /api/v1/runners/jobs/{jobUUID}/abort
    /// - API used by PeerTube runners
    /// - parameter jobUUID: (path)  
    /// - parameter apiV1RunnersJobsJobUUIDAbortPostRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1RunnersJobsJobUUIDAbortPost(jobUUID: UUID, apiV1RunnersJobsJobUUIDAbortPostRequest: ApiV1RunnersJobsJobUUIDAbortPostRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/runners/jobs/{jobUUID}/abort"
                path = path.replacingOccurrences(of: "{jobUUID}", with: jobUUID.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(apiV1RunnersJobsJobUUIDAbortPostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Accept job
    /// - POST /api/v1/runners/jobs/{jobUUID}/accept
    /// - API used by PeerTube runners
    /// - parameter jobUUID: (path)  
    /// - parameter apiV1RunnersUnregisterPostRequest: (body)  (optional)
    /// - returns: AnyPublisher<ApiV1RunnersJobsJobUUIDAcceptPost200Response, Error> 
    open func apiV1RunnersJobsJobUUIDAcceptPost(jobUUID: UUID, apiV1RunnersUnregisterPostRequest: ApiV1RunnersUnregisterPostRequest? = nil) -> AnyPublisher<ApiV1RunnersJobsJobUUIDAcceptPost200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/runners/jobs/{jobUUID}/accept"
                path = path.replacingOccurrences(of: "{jobUUID}", with: jobUUID.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(apiV1RunnersUnregisterPostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ApiV1RunnersJobsJobUUIDAcceptPost200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ApiV1RunnersJobsJobUUIDAcceptPost200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Cancel a job
    /// - GET /api/v1/runners/jobs/{jobUUID}/cancel
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter jobUUID: (path)  
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1RunnersJobsJobUUIDCancelGet(jobUUID: UUID) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/runners/jobs/{jobUUID}/cancel"
                path = path.replacingOccurrences(of: "{jobUUID}", with: jobUUID.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete a job
    /// - DELETE /api/v1/runners/jobs/{jobUUID}
    /// - The endpoint will first cancel the job if needed, and then remove it from the database. Children jobs will also be removed
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter jobUUID: (path)  
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1RunnersJobsJobUUIDDelete(jobUUID: UUID) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/runners/jobs/{jobUUID}"
                path = path.replacingOccurrences(of: "{jobUUID}", with: jobUUID.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Post job error
    /// - POST /api/v1/runners/jobs/{jobUUID}/error
    /// - API used by PeerTube runners
    /// - parameter jobUUID: (path)  
    /// - parameter apiV1RunnersJobsJobUUIDErrorPostRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1RunnersJobsJobUUIDErrorPost(jobUUID: UUID, apiV1RunnersJobsJobUUIDErrorPostRequest: ApiV1RunnersJobsJobUUIDErrorPostRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/runners/jobs/{jobUUID}/error"
                path = path.replacingOccurrences(of: "{jobUUID}", with: jobUUID.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(apiV1RunnersJobsJobUUIDErrorPostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Post job success
    /// - POST /api/v1/runners/jobs/{jobUUID}/success
    /// - API used by PeerTube runners
    /// - parameter jobUUID: (path)  
    /// - parameter apiV1RunnersJobsJobUUIDSuccessPostRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1RunnersJobsJobUUIDSuccessPost(jobUUID: UUID, apiV1RunnersJobsJobUUIDSuccessPostRequest: ApiV1RunnersJobsJobUUIDSuccessPostRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/runners/jobs/{jobUUID}/success"
                path = path.replacingOccurrences(of: "{jobUUID}", with: jobUUID.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(apiV1RunnersJobsJobUUIDSuccessPostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update job
    /// - POST /api/v1/runners/jobs/{jobUUID}/update
    /// - API used by PeerTube runners
    /// - parameter jobUUID: (path)  
    /// - parameter apiV1RunnersJobsJobUUIDUpdatePostRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1RunnersJobsJobUUIDUpdatePost(jobUUID: UUID, apiV1RunnersJobsJobUUIDUpdatePostRequest: ApiV1RunnersJobsJobUUIDUpdatePostRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/runners/jobs/{jobUUID}/update"
                path = path.replacingOccurrences(of: "{jobUUID}", with: jobUUID.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(apiV1RunnersJobsJobUUIDUpdatePostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Request a new job
    /// - POST /api/v1/runners/jobs/request
    /// - API used by PeerTube runners
    /// - parameter apiV1RunnersUnregisterPostRequest: (body)  (optional)
    /// - returns: AnyPublisher<ApiV1RunnersJobsRequestPost200Response, Error> 
    open func apiV1RunnersJobsRequestPost(apiV1RunnersUnregisterPostRequest: ApiV1RunnersUnregisterPostRequest? = nil) -> AnyPublisher<ApiV1RunnersJobsRequestPost200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/runners/jobs/request"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(apiV1RunnersUnregisterPostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ApiV1RunnersJobsRequestPost200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ApiV1RunnersJobsRequestPost200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
