//
// VideoPlaylistsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VideoPlaylistsAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }


    /// Create a video playlist
    /// - POST /api/v1/video-playlists
    /// - If the video playlist is set as public, `videoChannelId` is mandatory.
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter displayName: (form) Video playlist display name 
    /// - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
    /// - parameter privacy: (form)  (optional)
    /// - parameter description: (form) Video playlist description (optional)
    /// - parameter videoChannelId: (form)  (optional)
    /// - returns: AnyPublisher<AddPlaylist200Response, Error> 
    open func addPlaylist(displayName: String, thumbnailfile: Data? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil) -> AnyPublisher<AddPlaylist200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/video-playlists"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                let multipartBoundary = String(format: "Boundary+%08X%08X", arc4random(), arc4random())
                var multipartData = Data()
				let displayNameHeader = "--\(multipartBoundary)\r\n"
				    .appending("Content-Disposition:form-data; name=\"displayName\"\r\n")
				    .appending("\r\n")
				multipartData.append(displayNameHeader.data(using: .utf8) ?? Data())
				multipartData.append(displayName.data(using: .utf8) ?? Data())
				multipartData.append("\r\n".data(using: .utf8) ?? Data())

				if let thumbnailfile = thumbnailfile {
					let thumbnailfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"thumbnailfile\"; filename=\"thumbnailfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(thumbnailfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(thumbnailfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let privacy = privacy {
					let privacyHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"privacy\"\r\n")
					    .appending("\r\n")
					multipartData.append(privacyHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let description = description {
					let descriptionHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"description\"\r\n")
					    .appending("\r\n")
					multipartData.append(descriptionHeader.data(using: .utf8) ?? Data())
					multipartData.append(description.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let videoChannelId = videoChannelId {
					let videoChannelIdHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"videoChannelId\"\r\n")
					    .appending("\r\n")
					multipartData.append(videoChannelIdHeader.data(using: .utf8) ?? Data())
					multipartData.append()
				}

                multipartData.append("\r\n--\(multipartBoundary)--\r\n".data(using: .utf8) ?? Data())
                request.httpBody = multipartData
                request.setValue("\(multipartData.count)", forHTTPHeaderField: "Content-Length")
                request.setValue("multipart/form-data; boundary=\(multipartBoundary)", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AddPlaylist200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(AddPlaylist200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Add a video in a playlist
    /// - POST /api/v1/video-playlists/{playlistId}/videos
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter playlistId: (path) Playlist id 
    /// - parameter addVideoPlaylistVideoRequest: (body)  (optional)
    /// - returns: AnyPublisher<AddVideoPlaylistVideo200Response, Error> 
    open func addVideoPlaylistVideo(playlistId: Int, addVideoPlaylistVideoRequest: AddVideoPlaylistVideoRequest? = nil) -> AnyPublisher<AddVideoPlaylistVideo200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}/videos"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(addVideoPlaylistVideoRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AddVideoPlaylistVideo200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(AddVideoPlaylistVideo200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List playlists of an account
    /// - GET /api/v1/accounts/{name}/video-playlists
    /// - parameter name: (path) The username or handle of the account 
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort column (optional)
    /// - parameter search: (query) Plain text search, applied to various parts of the model depending on endpoint (optional)
    /// - parameter playlistType: (query)  (optional)
    /// - returns: AnyPublisher<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response, Error> 
    open func apiV1AccountsNameVideoPlaylistsGet(name: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, search: String? = nil, playlistType: VideoPlaylistTypeSet? = nil) -> AnyPublisher<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/accounts/{name}/video-playlists"
                path = path.replacingOccurrences(of: "{name}", with: name)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                if let search = search { queryItems.append(URLQueryItem(name: "search", value: search)) } 
                if let playlistType = playlistType { queryItems.append(URLQueryItem(name: "playlistType", value: playlistType.rawValue)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Check video exists in my playlists
    /// - GET /api/v1/users/me/video-playlists/videos-exist
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter videoIds: (query) The video ids to check 
    /// - returns: AnyPublisher<ApiV1UsersMeVideoPlaylistsVideosExistGet200Response, Error> 
    open func apiV1UsersMeVideoPlaylistsVideosExistGet(videoIds: [Int]) -> AnyPublisher<ApiV1UsersMeVideoPlaylistsVideosExistGet200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/users/me/video-playlists/videos-exist"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "videoIds", value: String(data: try self.encoder.encode(videoIds), encoding: .utf8) ?? ""))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ApiV1UsersMeVideoPlaylistsVideosExistGet200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ApiV1UsersMeVideoPlaylistsVideosExistGet200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List playlists of a channel
    /// - GET /api/v1/video-channels/{channelHandle}/video-playlists
    /// - parameter channelHandle: (path) The video channel handle 
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort column (optional)
    /// - parameter playlistType: (query)  (optional)
    /// - returns: AnyPublisher<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response, Error> 
    open func apiV1VideoChannelsChannelHandleVideoPlaylistsGet(channelHandle: String, start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil) -> AnyPublisher<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-channels/{channelHandle}/video-playlists"
                path = path.replacingOccurrences(of: "{channelHandle}", with: channelHandle)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                if let playlistType = playlistType { queryItems.append(URLQueryItem(name: "playlistType", value: playlistType.rawValue)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete a video playlist
    /// - DELETE /api/v1/video-playlists/{playlistId}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter playlistId: (path) Playlist id 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1VideoPlaylistsPlaylistIdDelete(playlistId: Int) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Get a video playlist
    /// - GET /api/v1/video-playlists/{playlistId}
    /// - parameter playlistId: (path) Playlist id 
    /// - returns: AnyPublisher<VideoPlaylist, Error> 
    open func apiV1VideoPlaylistsPlaylistIdGet(playlistId: Int) -> AnyPublisher<VideoPlaylist, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoPlaylist, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoPlaylist.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update a video playlist
    /// - PUT /api/v1/video-playlists/{playlistId}
    /// - If the video playlist is set as public, the playlist must have a assigned channel.
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter playlistId: (path) Playlist id 
    /// - parameter displayName: (form) Video playlist display name (optional)
    /// - parameter thumbnailfile: (form) Video playlist thumbnail file (optional)
    /// - parameter privacy: (form)  (optional)
    /// - parameter description: (form) Video playlist description (optional)
    /// - parameter videoChannelId: (form)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1VideoPlaylistsPlaylistIdPut(playlistId: Int, displayName: String? = nil, thumbnailfile: Data? = nil, privacy: VideoPlaylistPrivacySet? = nil, description: String? = nil, videoChannelId: Int? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                let multipartBoundary = String(format: "Boundary+%08X%08X", arc4random(), arc4random())
                var multipartData = Data()
				if let displayName = displayName {
					let displayNameHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"displayName\"\r\n")
					    .appending("\r\n")
					multipartData.append(displayNameHeader.data(using: .utf8) ?? Data())
					multipartData.append(displayName.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let thumbnailfile = thumbnailfile {
					let thumbnailfileHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"thumbnailfile\"; filename=\"thumbnailfile\"\r\n")
					    .appending("Content-Type: image/jpeg\r\n")
					    .appending("\r\n")
					multipartData.append(thumbnailfileHeader.data(using: .utf8) ?? Data())
					multipartData.append(thumbnailfile)
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let privacy = privacy {
					let privacyHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"privacy\"\r\n")
					    .appending("\r\n")
					multipartData.append(privacyHeader.data(using: .utf8) ?? Data())
					multipartData.append()
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let description = description {
					let descriptionHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"description\"\r\n")
					    .appending("\r\n")
					multipartData.append(descriptionHeader.data(using: .utf8) ?? Data())
					multipartData.append(description.data(using: .utf8) ?? Data())
					multipartData.append("\r\n".data(using: .utf8) ?? Data())
				}

				if let videoChannelId = videoChannelId {
					let videoChannelIdHeader = "--\(multipartBoundary)\r\n"
					    .appending("Content-Disposition:form-data; name=\"videoChannelId\"\r\n")
					    .appending("\r\n")
					multipartData.append(videoChannelIdHeader.data(using: .utf8) ?? Data())
					multipartData.append()
				}

                multipartData.append("\r\n--\(multipartBoundary)--\r\n".data(using: .utf8) ?? Data())
                request.httpBody = multipartData
                request.setValue("\(multipartData.count)", forHTTPHeaderField: "Content-Length")
                request.setValue("multipart/form-data; boundary=\(multipartBoundary)", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Delete an element from a playlist
    /// - DELETE /api/v1/video-playlists/{playlistId}/videos/{playlistElementId}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter playlistId: (path) Playlist id 
    /// - parameter playlistElementId: (path) Playlist element id 
    /// - returns: AnyPublisher<Void, Error> 
    open func delVideoPlaylistVideo(playlistId: Int, playlistElementId: Int) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                path = path.replacingOccurrences(of: "{playlistElementId}", with: "\(playlistElementId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List available playlist privacy policies
    /// - GET /api/v1/video-playlists/privacies
    /// - returns: AnyPublisher<[String], Error> 
    open func getPlaylistPrivacyPolicies() -> AnyPublisher<[String], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/video-playlists/privacies"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[String], Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode([String].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List video playlists
    /// - GET /api/v1/video-playlists
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort column (optional)
    /// - parameter playlistType: (query)  (optional)
    /// - returns: AnyPublisher<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response, Error> 
    open func getPlaylists(start: Int? = nil, count: Int? = nil, sort: String? = nil, playlistType: VideoPlaylistTypeSet? = nil) -> AnyPublisher<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/video-playlists"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                if let playlistType = playlistType { queryItems.append(URLQueryItem(name: "playlistType", value: playlistType.rawValue)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(ApiV1VideoChannelsChannelHandleVideoPlaylistsGet200Response.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List videos of a playlist
    /// - GET /api/v1/video-playlists/{playlistId}/videos
    /// - parameter playlistId: (path) Playlist id 
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - returns: AnyPublisher<VideoListResponse, Error> 
    open func getVideoPlaylistVideos(playlistId: Int, start: Int? = nil, count: Int? = nil) -> AnyPublisher<VideoListResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}/videos"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VideoListResponse, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(VideoListResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Update a playlist element
    /// - PUT /api/v1/video-playlists/{playlistId}/videos/{playlistElementId}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter playlistId: (path) Playlist id 
    /// - parameter playlistElementId: (path) Playlist element id 
    /// - parameter putVideoPlaylistVideoRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func putVideoPlaylistVideo(playlistId: Int, playlistElementId: Int, putVideoPlaylistVideoRequest: PutVideoPlaylistVideoRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                path = path.replacingOccurrences(of: "{playlistElementId}", with: "\(playlistElementId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                request.httpBody = try self.encoder.encode(putVideoPlaylistVideoRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// Reorder a playlist
    /// - POST /api/v1/video-playlists/{playlistId}/videos/reorder
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter playlistId: (path) Playlist id 
    /// - parameter reorderVideoPlaylistRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func reorderVideoPlaylist(playlistId: Int, reorderVideoPlaylistRequest: ReorderVideoPlaylistRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/video-playlists/{playlistId}/videos/reorder"
                path = path.replacingOccurrences(of: "{playlistId}", with: "\(playlistId)")
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(reorderVideoPlaylistRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
