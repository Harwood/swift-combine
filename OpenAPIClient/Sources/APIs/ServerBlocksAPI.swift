//
// ServerBlocksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class ServerBlocksAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://peertube2.cpy.re")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }


    /// Get block status of accounts/hosts
    /// - GET /api/v1/blocklist/status
    /// - parameter accounts: (query) Check if these accounts are blocked (optional)
    /// - parameter hosts: (query) Check if these hosts are blocked (optional)
    /// - returns: AnyPublisher<BlockStatus, Error> 
    open func apiV1BlocklistStatusGet(accounts: [String]? = nil, hosts: [String]? = nil) -> AnyPublisher<BlockStatus, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/blocklist/status"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let accounts = accounts { queryItems.append(URLQueryItem(name: "accounts", value: accounts.joined(separator: ","))) } 
                if let hosts = hosts { queryItems.append(URLQueryItem(name: "hosts", value: hosts.joined(separator: ","))) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<BlockStatus, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    try self.decoder.decode(BlockStatus.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }


    /// List server blocks
    /// - GET /api/v1/server/blocklist/servers
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter start: (query) Offset used to paginate results (optional)
    /// - parameter count: (query) Number of items to return (optional, default to 15)
    /// - parameter sort: (query) Sort column (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1ServerBlocklistServersGet(start: Int? = nil, count: Int? = nil, sort: String? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/server/blocklist/servers"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let start = start { queryItems.append(URLQueryItem(name: "start", value: "\(start)")) } 
                if let count = count { queryItems.append(URLQueryItem(name: "count", value: "\(count)")) } 
                if let sort = sort { queryItems.append(URLQueryItem(name: "sort", value: sort)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1ServerBlocklistServersHostDeleteError: Error, CustomStringConvertible {
        // account block does not exist
        case code404Error

        public var description: String {
            switch self {
            case .code404Error:
                return "ApiV1ServerBlocklistServersHostDeleteError: account block does not exist"
            }
        }
    }

    /// Unblock a server by its domain
    /// - DELETE /api/v1/server/blocklist/servers/{host}
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter host: (path) server domain to unblock 
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1ServerBlocklistServersHostDelete(host: String) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/api/v1/server/blocklist/servers/{host}"
                path = path.replacingOccurrences(of: "{host}", with: host)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 404 {
                        return ApiV1ServerBlocklistServersHostDeleteError.code404Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ApiV1ServerBlocklistServersPostError: Error, CustomStringConvertible {
        // self-blocking forbidden
        case code409Error

        public var description: String {
            switch self {
            case .code409Error:
                return "ApiV1ServerBlocklistServersPostError: self-blocking forbidden"
            }
        }
    }

    /// Block a server
    /// - POST /api/v1/server/blocklist/servers
    /// - OAuth:
    /// - type: oauth2
    /// - name: OAuth2
    /// - parameter apiV1ServerBlocklistServersPostRequest: (body)  (optional)
    /// - returns: AnyPublisher<Void, Error> 
    open func apiV1ServerBlocklistServersPost(apiV1ServerBlocklistServersPostRequest: ApiV1ServerBlocklistServersPostRequest? = nil) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/api/v1/server/blocklist/servers"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(apiV1ServerBlocklistServersPostRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 409 {
                        return ApiV1ServerBlocklistServersPostError.code409Error
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
