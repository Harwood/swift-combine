//
// Job.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Job: Codable {
    public enum State: String, Codable, CaseIterable {
        case active = "active"
        case completed = "completed"
        case failed = "failed"
        case waiting = "waiting"
        case delayed = "delayed"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case activitypubHttpUnicast = "activitypub-http-unicast"
        case activitypubHttpBroadcast = "activitypub-http-broadcast"
        case activitypubHttpFetcher = "activitypub-http-fetcher"
        case activitypubFollow = "activitypub-follow"
        case videoFileImport = "video-file-import"
        case videoTranscoding = "video-transcoding"
        case email = "email"
        case videoImport = "video-import"
        case videosViewsStats = "videos-views-stats"
        case activitypubRefresher = "activitypub-refresher"
        case videoRedundancy = "video-redundancy"
        case videoChannelImport = "video-channel-import"
    }
    public var id: Int?
    public var state: State?
    public var type: ModelType?
    public var data: [String: Any]?
    public var error: [String: Any]?
    public var createdAt: Date?
    public var finishedOn: Date?
    public var processedOn: Date?

    public init(id: Int? = nil, state: State? = nil, type: ModelType? = nil, data: [String: Any]? = nil, error: [String: Any]? = nil, createdAt: Date? = nil, finishedOn: Date? = nil, processedOn: Date? = nil) {
        self.id = id
        self.state = state
        self.type = type
        self.data = data
        self.error = error
        self.createdAt = createdAt
        self.finishedOn = finishedOn
        self.processedOn = processedOn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case state
        case type
        case data
        case error
        case createdAt
        case finishedOn
        case processedOn
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(Int.self, forKey: .id)
        state = try container.decodeIfPresent(State.self, forKey: .state)
        type = try container.decodeIfPresent(ModelType.self, forKey: .type)
        data = try container.decodeIfPresent([String: Any].self, forKey: .data)
        error = try container.decodeIfPresent([String: Any].self, forKey: .error)
        createdAt = try container.decodeIfPresent(Date.self, forKey: .createdAt)
        finishedOn = try container.decodeIfPresent(Date.self, forKey: .finishedOn)
        processedOn = try container.decodeIfPresent(Date.self, forKey: .processedOn)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(type, forKey: .type)
        if let data = data {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: data), forKey: .data)
        }
        if let error = error {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: error), forKey: .error)
        }
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(finishedOn, forKey: .finishedOn)
        try container.encodeIfPresent(processedOn, forKey: .processedOn)
    }
}
