//
// PlaybackMetricCreate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct PlaybackMetricCreate: Codable {
    public enum PlayerMode: String, Codable, CaseIterable {
        case p2pMediaLoader = "p2p-media-loader"
        case webVideo = "web-video"
    }
    public var playerMode: PlayerMode
    /// Current player video resolution
    public var resolution: Double?
    /// Current player video fps
    public var fps: Double?
    public var p2pEnabled: Bool
    /// P2P peers connected (doesn't include WebSeed peers)
    public var p2pPeers: Double?
    /// How many resolution changes occurred since the last metric creation
    public var resolutionChanges: Double
    /// How many errors occurred since the last metric creation
    public var errors: Double
    /// How many bytes were downloaded with P2P since the last metric creation
    public var downloadedBytesP2P: Double
    /// How many bytes were downloaded with HTTP since the last metric creation
    public var downloadedBytesHTTP: Double
    /// How many bytes were uploaded with P2P since the last metric creation
    public var uploadedBytesP2P: Double
    public var videoId: ApiV1VideosOwnershipIdAcceptPostIdParameter

    public init(playerMode: PlayerMode, resolution: Double? = nil, fps: Double? = nil, p2pEnabled: Bool, p2pPeers: Double? = nil, resolutionChanges: Double, errors: Double, downloadedBytesP2P: Double, downloadedBytesHTTP: Double, uploadedBytesP2P: Double, videoId: ApiV1VideosOwnershipIdAcceptPostIdParameter) {
        self.playerMode = playerMode
        self.resolution = resolution
        self.fps = fps
        self.p2pEnabled = p2pEnabled
        self.p2pPeers = p2pPeers
        self.resolutionChanges = resolutionChanges
        self.errors = errors
        self.downloadedBytesP2P = downloadedBytesP2P
        self.downloadedBytesHTTP = downloadedBytesHTTP
        self.uploadedBytesP2P = uploadedBytesP2P
        self.videoId = videoId
    }
}
