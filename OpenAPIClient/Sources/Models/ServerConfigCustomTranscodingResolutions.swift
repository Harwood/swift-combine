//
// ServerConfigCustomTranscodingResolutions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/// Resolutions to transcode _new videos_ to 
public struct ServerConfigCustomTranscodingResolutions: Codable {
    public var _0p: Bool?
    public var _144p: Bool?
    public var _240p: Bool?
    public var _360p: Bool?
    public var _480p: Bool?
    public var _720p: Bool?
    public var _1080p: Bool?
    public var _1440p: Bool?
    public var _2160p: Bool?

    public init(_0p: Bool? = nil, _144p: Bool? = nil, _240p: Bool? = nil, _360p: Bool? = nil, _480p: Bool? = nil, _720p: Bool? = nil, _1080p: Bool? = nil, _1440p: Bool? = nil, _2160p: Bool? = nil) {
        self._0p = _0p
        self._144p = _144p
        self._240p = _240p
        self._360p = _360p
        self._480p = _480p
        self._720p = _720p
        self._1080p = _1080p
        self._1440p = _1440p
        self._2160p = _2160p
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _0p = "0p"
        case _144p = "144p"
        case _240p = "240p"
        case _360p = "360p"
        case _480p = "480p"
        case _720p = "720p"
        case _1080p = "1080p"
        case _1440p = "1440p"
        case _2160p = "2160p"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _0p = try container.decodeIfPresent(Bool.self, forKey: ._0p)
        _144p = try container.decodeIfPresent(Bool.self, forKey: ._144p)
        _240p = try container.decodeIfPresent(Bool.self, forKey: ._240p)
        _360p = try container.decodeIfPresent(Bool.self, forKey: ._360p)
        _480p = try container.decodeIfPresent(Bool.self, forKey: ._480p)
        _720p = try container.decodeIfPresent(Bool.self, forKey: ._720p)
        _1080p = try container.decodeIfPresent(Bool.self, forKey: ._1080p)
        _1440p = try container.decodeIfPresent(Bool.self, forKey: ._1440p)
        _2160p = try container.decodeIfPresent(Bool.self, forKey: ._2160p)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_0p, forKey: ._0p)
        try container.encodeIfPresent(_144p, forKey: ._144p)
        try container.encodeIfPresent(_240p, forKey: ._240p)
        try container.encodeIfPresent(_360p, forKey: ._360p)
        try container.encodeIfPresent(_480p, forKey: ._480p)
        try container.encodeIfPresent(_720p, forKey: ._720p)
        try container.encodeIfPresent(_1080p, forKey: ._1080p)
        try container.encodeIfPresent(_1440p, forKey: ._1440p)
        try container.encodeIfPresent(_2160p, forKey: ._2160p)
    }
}
