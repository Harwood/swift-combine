//
// Account.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Account: Codable {
    public var id: Int?
    public var url: String?
    /// immutable name of the user, used to find or mention its actor
    public var name: String?
    /// server on which the actor is resident
    public var host: String?
    /// whether this actor's host allows redundancy of its videos
    public var hostRedundancyAllowed: Bool?
    /// number of actors subscribed to by this actor, as seen by this instance
    public var followingCount: Int?
    /// number of followers of this actor, as seen by this instance
    public var followersCount: Int?
    public var createdAt: Date?
    public var updatedAt: Date?
    public var userId: Any?
    /// editable name of the account, displayed in its representations
    public var displayName: String?
    /// text or bio displayed on the account's profile
    public var description: String?

    public init(id: Int? = nil, url: String? = nil, name: String? = nil, host: String? = nil, hostRedundancyAllowed: Bool? = nil, followingCount: Int? = nil, followersCount: Int? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, userId: Any? = nil, displayName: String? = nil, description: String? = nil) {
        self.id = id
        self.url = url
        self.name = name
        self.host = host
        self.hostRedundancyAllowed = hostRedundancyAllowed
        self.followingCount = followingCount
        self.followersCount = followersCount
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.userId = userId
        self.displayName = displayName
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case url
        case name
        case host
        case hostRedundancyAllowed
        case followingCount
        case followersCount
        case createdAt
        case updatedAt
        case userId
        case displayName
        case description
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(Int.self, forKey: .id)
        url = try container.decodeIfPresent(String.self, forKey: .url)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        host = try container.decodeIfPresent(String.self, forKey: .host)
        hostRedundancyAllowed = try container.decodeIfPresent(Bool.self, forKey: .hostRedundancyAllowed)
        followingCount = try container.decodeIfPresent(Int.self, forKey: .followingCount)
        followersCount = try container.decodeIfPresent(Int.self, forKey: .followersCount)
        createdAt = try container.decodeIfPresent(Date.self, forKey: .createdAt)
        updatedAt = try container.decodeIfPresent(Date.self, forKey: .updatedAt)
        userId = try container.decodeIfPresent(Any.self, forKey: .userId)
        displayName = try container.decodeIfPresent(String.self, forKey: .displayName)
        description = try container.decodeIfPresent(String.self, forKey: .description)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(host, forKey: .host)
        try container.encodeIfPresent(hostRedundancyAllowed, forKey: .hostRedundancyAllowed)
        try container.encodeIfPresent(followingCount, forKey: .followingCount)
        try container.encodeIfPresent(followersCount, forKey: .followersCount)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        if let userId = userId {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: userId), forKey: .userId)
        }
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(description, forKey: .description)
    }
}
